struct Color {
    r: f32,
    g: f32,
    b: f32
}

fn @make_color(r: f32, g: f32, b: f32) -> Color {
    Color {
        r: r,
        g: g,
        b: b
    }
}

fn @color_add(a: Color, b: Color) -> Color {
    make_color(a.r + b.r, a.g + b.g, a.b + b.b)
}

fn @color_mul(a: Color, b: Color) -> Color {
    make_color(a.r * b.r, a.g * b.g, a.b * b.b)
}

fn @color_mulf(c: Color, f: f32) -> Color {
    make_color(c.r * f, c.g * f, c.b * f)
}

fn @color_lerp(a: Color, b: Color, t: f32) -> Color {
    make_color((1.0f - t) * a.r + t * b.r,
               (1.0f - t) * a.g + t * b.g,
               (1.0f - t) * a.b + t * b.b)
}

fn @color_luminance(c: Color) -> f32 {
    c.r * 0.2126f + c.g * 0.7152f + c.b * 0.0722f
}

fn @is_black(c: Color) -> bool {
    c.r == 0.0f && c.g == 0.0f && c.b == 0.0f
}

fn @vec3_to_color(v: Vec3) -> Color {
    make_color(v.x, v.y, v.z)
}

fn @color_to_vec3(c: Color) -> Vec3 {
    make_vec3(c.r, c.g, c.b)
}

static black = Color { r: 0.0f, g: 0.0f, b: 0.0f };
static white = Color { r: 1.0f, g: 1.0f, b: 1.0f };
static pink  = Color { r: 1.0f, g: 0.0f, b: 1.0f }; 
