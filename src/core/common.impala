static flt_eps = 1.1920928955e-07f;
static flt_max = 3.4028234664e+38f;
static flt_min = 1.1754943508e-38f;
static flt_inf = 1.0f / 0.0f;
static flt_pi = 3.14159265359f;
static flt_sqrt2 = 1.41421356237f;
static flt_sqrt3 = 1.73205080757f;

struct FastDiv {
    m: u32,
    s1: u32,
    s2: u32
}

fn @make_fast_div(div: u32) -> FastDiv {
    let log = ilog2(div as i32) as u32;
    let max = 1u64 << 32u64;
    let m = (max << log as u64) / (div as u64) - max + 1u64;
    let s1 = select(log < 1u32, log, 1u32);
    let s2 = select(log > 1u32, log - 1u32, 0u32);
    FastDiv {
        m: m as u32,
        s1: s1,
        s2: s2
    }
}

fn @fast_div(fd: FastDiv, i: u32) -> u32 {
    let t = (((fd.m as u64) * (i as u64)) >> 32u64) as u32;
    (t + ((i - t) >> fd.s1)) >> fd.s2
}

extern "device" {
    fn "llvm.expect.i1" expect(bool, bool) -> bool;
}

fn @  likely(cond: bool) -> bool { expect(cond,  true) }
fn @unlikely(cond: bool) -> bool { expect(cond, false) }

fn @once(body: fn () -> ()) -> () {
    @@body()
}

fn @atomic_add_f32(ptr: &mut f32, value: f32) -> () {
    let mut cur = *(ptr as &i32);
    while true {
        let next = bitcast[f32](cur) + value;
        let (new, success) = cmpxchg(ptr as &mut i32, cur, bitcast[i32](next));
        if success { break() }
        cur = new;
    }
}

fn @prodsign(x: f32, y: f32) -> f32 {
    bitcast[f32](bitcast[i32](x) ^ (bitcast[i32](y) & bitcast[i32](0x80000000u)))
}

fn @safe_rcp(x: f32) -> f32 {
    let min_rcp = 1e-8f;
    if select(x > 0.0f, x, -x) < min_rcp { prodsign(min_rcp, x) } else { 1.0f / x }
}

fn @round_up(n: i32, d: i32) -> i32 {
    let m = n % d;
    n + (if m != 0 { d - m } else { 0 })
}

fn @round_down(n: i32, d: i32) -> i32 {
    (n / d) * d
}

fn @sqrt_newton(y: f32, p: f32) -> f32 {
    fn @(?x) newton(x: f32) -> f32 {
        if (x * x - y) > p {
            newton(x - (x * x - y) / (2.0f * x))
        } else {
            x
        }
    }
    newton(1.0f)
}

fn @ilog2(i: i32) -> i32 {
    fn @(?i) ilog2_helper(i: i32, p: i32) -> i32 {
        if i <= (1 << p) {
            p
        } else {
            ilog2_helper(i, p + 1)
        }
    }
    ilog2_helper(i, 0)
}

fn @lerp(a: f32, b: f32, k: f32) -> f32 {
    (1.0f - k) * a + k * b
}

fn @lerp2(a: f32, b: f32, c: f32, k1: f32, k2: f32) -> f32 {
    (1.0f - k1 - k2) * a + k1 * b + k2 * c
}

fn @triangle_area(math: Intrinsics, v0: Vec3, v1: Vec3, v2: Vec3) -> f32 {
    let e1 = vec3_sub(v1, v0);
    let e2 = vec3_sub(v2, v0);
    let  n = vec3_cross(e1, e2);
    0.5f * vec3_len(math, n)
}

fn @positive_cos(a: Vec3, b: Vec3) -> f32 {
    let cos = vec3_dot(a, b);
    if cos >= 0.0f { cos } else { 0.0f }
}

fn @swap_f32(a: &mut f32, b: &mut f32) -> () {
    let tmp = *a;
    *a = *b;
    *b = tmp;
}

fn @swap_i32(a: &mut i32, b: &mut i32) -> () {
    let tmp = *a;
    *a = *b;
    *b = tmp;
}

fn @swap_u32(a: &mut u32, b: &mut u32) -> () {
    let tmp = *a;
    *a = *b;
    *b = tmp;
}

fn @shrink_alloc(dev: i32, ptr: &[i8], size: i64) -> &[i8] {
    let tmp = runtime_alloc(dev, size);
    runtime_copy(dev, ptr, 0i64, dev, tmp, 0i64, size);
    tmp
}
