// Constants -----------------------------------------------------------------------

static flt_eps = 1.1920928955e-07:f32;
static flt_max = 3.4028234664e+38:f32;
static flt_min = 1.1754943509e-38:f32;
static flt_inf = 1:f32 / 0:f32;
static flt_pi = 3.14159265359:f32;
static flt_sqrt2 = 1.41421356237:f32;
static flt_sqrt3 = 1.73205080757:f32;

// Option --------------------------------------------------------------------------

enum Option[T] {
    Some(T),
    None
}

fn @make_option[T](t: T) = Option[T]::Some(t)
fn @is_some[T](opt: Option[T]) = match opt {
    Option[T]::Some(_) => true,
    _ => false
}
fn @is_none[T](opt: Option[T]) = !is_some(opt)
fn @from_option[T](opt: Option[T], def: T) = match opt {
    Option[T]::Some(x) => x,
    _ => def
}

// Fast division -------------------------------------------------------------------

struct FastDiv {
    m: u32,
    s1: u32,
    s2: u32
}

fn @make_fast_div(div: u32) -> FastDiv {
    let log = ilog2(div as i32) as u32;
    let max = 1:u64 << 32:u64;
    let m = (max << log as u64) / (div as u64) - max + 1;
    let s1 = select(log < 1, log, 1:u32);
    let s2 = select(log > 1, log - 1, 0:u32);
    FastDiv {
        m = m as u32,
        s1 = s1,
        s2 = s2
    }
}

fn @fast_div(fd: FastDiv, i: u32) -> u32 {
    let t = (((fd.m as u64) * (i as u64)) >> 32) as u32;
    (t + ((i - t) >> fd.s1)) >> fd.s2
}

// Fast power ----------------------------------------------------------------------

// Inspired from:
// http://www.machinedlearnings.com/2011/06/fast-approximate-logarithm-exponential.html

fn @fastlog2(x: f32) -> f32 {
    let vx = bitcast[u32](x);
    let mx = (vx & 0x007FFFFF:u32) | 0x3f000000:u32;
    let y = (vx as f32) * 1.1920928955078125e-7:f32;
    let z = bitcast[f32](mx);
    y - 124.22551499 - 1.498030302 * z - 1.72587999 / (0.3520887068 + z)
}

fn @fastpow2(p: f32) -> f32 {
    let offset = select(p < 0:f32, 1:f32, 0:f32);
    let clipp  = select(p < -126:f32, -126:f32, p);
    let w = clipp as i32;
    let z = clipp - (w as f32) + offset;
    let v = ((1:u32 << 23:u32) as f32 * (clipp + 121.2740575 + 27.7280233 / (4.84252568 - z) - 1.49012907 * z)) as i32;
    bitcast[f32](v)
}

fn @fastpow(x: f32, p: f32) -> f32 {
    fastpow2(p * fastlog2(x))
}

// Likely/unlikely -----------------------------------------------------------------

#[import(cc = "device", name = "llvm.expect.i1")] fn expect(bool, bool) -> bool;

fn @  likely(cond: bool) -> bool { expect(cond,  true) }
fn @unlikely(cond: bool) -> bool { expect(cond, false) }

// Misc. ---------------------------------------------------------------------------

fn @prodsign(x: f32, y: f32) -> f32 {
    bitcast[f32](bitcast[i32](x) ^ (bitcast[i32](y) & bitcast[i32](0x80000000:u32)))
}

fn @safe_rcp(x: f32) -> f32 {
    let min_rcp = 1e-8:f32;
    if select(x > 0, x, -x) < min_rcp { prodsign(flt_max, x) } else { 1 / x }
}

fn @round_up(n: i32, d: i32) -> i32 {
    let m = n % d;
    n + (if m != 0 { d - m } else { 0 })
}

fn @round_down(n: i32, d: i32) -> i32 {
    (n / d) * d
}

fn @sqrt_newton(y: f32, p: f32) -> f32 {
    fn @(?x) newton(x: f32) -> f32 {
        if (x * x - y) > p {
            newton(x - (x * x - y) / (2 * x))
        } else {
            x
        }
    }
    newton(1)
}

fn @ilog2(i: i32) -> i32 {
    fn @(?i) ilog2_helper(i: i32, p: i32) -> i32 {
        if i <= (1 << p) {
            p
        } else {
            ilog2_helper(i, p + 1)
        }
    }
    ilog2_helper(i, 0)
}

fn @lerp(a: f32, b: f32, k: f32) -> f32 {
    (1 - k) * a + k * b
}

fn @lerp2(a: f32, b: f32, c: f32, k1: f32, k2: f32) -> f32 {
    (1 - k1 - k2) * a + k1 * b + k2 * c
}

fn @triangle_area(math: Intrinsics, v0: Vec3, v1: Vec3, v2: Vec3) -> f32 {
    let e1 = vec3_sub(v1, v0);
    let e2 = vec3_sub(v2, v0);
    let  n = vec3_cross(e1, e2);
    0.5 * vec3_len(math, n)
}

fn @positive_cos(a: Vec3, b: Vec3) -> f32 {
    let cos = vec3_dot(a, b);
    if cos >= 0 { cos } else { 0 }
}

fn @swap[T](a: &mut T, b: &mut T) -> () {
    let tmp = *a;
    *a = *b;
    *b = tmp;
}
