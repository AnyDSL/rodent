static flt_eps = 1.0e-5f;
static flt_max = 1.0e+37f;
static flt_min = 1.0e-37f;
static flt_pi = 3.14159265359f;
static flt_sqrt2 = 1.41421356237f;
static flt_sqrt3 = 1.73205080757f;

fn range_step(a: int, b: int, c: int, body: fn (int) -> ()) -> () {
    if a < b {
        body(a);
        range_step(a + c, b, c, body, return)
    }
}

fn range(a: int, b: int, body: fn (int) -> ()) -> () {
    range_step(a, b, 1, body);
}

fn unroll(a: int, b: int, body: fn (int) -> ()) -> () {
    if a < b {
        body(a);
        @unroll(a + 1, b, body, return)
    }
}

fn prodsign(x: float, y: float) -> float {
    bitcast[float](bitcast[int](x) ^ (bitcast[int](y) & bitcast[int](0x80000000u)))
}

fn safe_rcp(x: float) -> float {
    if x == 0.0f { prodsign(flt_max, x) } else { 1.0f / x }
}

fn lerp(a: float, b: float, k: float) -> float {
    (1.0f - k) * a + k * b
}
