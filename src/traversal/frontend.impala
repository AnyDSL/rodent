struct RayAoS {
    org: [float * 3],
    tmin: float,
    dir: [float * 3],
    tmax: float
}

struct HitAoS {
    tri_id: int,
    t: float,
    u: float,
    v: float
}

extern fn frontend_cpu_traverse_bvh(bvh: &Bvh4, rays: &[RayAoS], hits: &mut [HitAoS], ray_count: int) -> () {
    @cpu_traverse_bvh_packet(bvh,
        |i| (ray(vec3(rays(i).org(0), rays(i).org(1), rays(i).org(2)),
                 vec3(rays(i).dir(0), rays(i).dir(1), rays(i).dir(2))),
             rays(i).tmin, rays(i).tmax),
        |i| {
            |id, t, u, v| {
                hits(i).tri_id = id;
                hits(i).t = t;
                hits(i).u = u;
                hits(i).v = v;
            }
        }, ray_count);
}
