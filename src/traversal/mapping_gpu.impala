// BVH layout ----------------------------------------------------------------------

struct Node2 {
    bounds: [f32 * 12], // lo_x, hi_x, lo_y, hi_y, ...
    child:  [i32 * 2],
    pad:    [i32 * 2]
}

struct Tri1 {
    v0: [f32 * 3],
    nx: f32,
    e1: [f32 * 3],
    ny: f32,
    e2: [f32 * 3],
    id: i32
}

fn @make_nvvm_bvh2_tri1(nodes: &[Node2], tris: &[Tri1], geom_id: i32) -> Bvh {
    Bvh {
        node: @ |j| {
            let simd_ptr = &nodes(j) as &[1][simd[f32 * 4]];
            let bb0 = nvvm_ldg4_f32(&simd_ptr(0));
            let bb1 = nvvm_ldg4_f32(&simd_ptr(1));
            let bb2 = nvvm_ldg4_f32(&simd_ptr(2));
            let children = nvvm_ldg4_i32(&simd_ptr(3) as &[1]simd[i32 * 4]);

            Node {
                bbox: @ |i| {
                    if i == 0 {
                        make_bbox(make_vec3(bb0(0), bb0(2), bb1(0)),
                                  make_vec3(bb0(1), bb0(3), bb1(1)))
                    } else {
                        make_bbox(make_vec3(bb1(2), bb2(0), bb2(2)),
                                  make_vec3(bb1(3), bb2(1), bb2(3)))
                    }
                },
                ordered_bbox: @ |i, _| undef[BBox](), // Not implemented
                child: @ |i| children(i)
            }
        },
        prim: @ |j| {
            let simd_ptr = &tris(j) as &[1][simd[f32 * 4]];
            let tri0 = nvvm_ldg4_f32(&simd_ptr(0));
            let tri1 = nvvm_ldg4_f32(&simd_ptr(1));
            let tri2 = nvvm_ldg4_f32(&simd_ptr(2));
            let id  = bitcast[i32](tri2(3));
            Prim {
                intersect: @ |_, math, mask, ray| {
                    let v0  = make_vec3(tri0(0), tri0(1), tri0(2));
                    let e1  = make_vec3(tri1(0), tri1(1), tri1(2));
                    let e2  = make_vec3(tri2(0), tri2(1), tri2(2));
                    let n   = make_vec3(tri0(3), tri1(3), vec3_cross(e1, e2).z);
                    let tri = make_tri(v0, e1, e2, n);
                    let (mask, t, u, v) = intersect_ray_tri(math, false /*backface_culling*/, mask, ray, tri);
                    (mask, make_hit(geom_id, id & 0x7FFFFFFF, t, make_vec2(u, v)))
                },
                is_valid: @ |_| true,
                is_last: id < 0,
                size: 1
            }
        },
        prefetch: @ |_| (), // Not implemented
        arity: 2
    }
}

// Min/Max functions  --------------------------------------------------------------

fn @make_nvvm_min_max() -> MinMax {
    // Use video instructions to speed-up the ray-box test
    MinMax {
        fminf: nvvm_fminf,
        fmaxf: nvvm_fmaxf,
        fminminf: @ |a, b, c| bitcast[f32](nvvm_minmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fmaxmaxf: @ |a, b, c| bitcast[f32](nvvm_maxmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fminmaxf: @ |a, b, c| bitcast[f32](nvvm_minmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fmaxminf: @ |a, b, c| bitcast[f32](nvvm_maxmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        is_integer: true
    }
}

// Traversal kernel  ---------------------------------------------------------------

// Traverses a single ray at a time. 
fn @gpu_traverse_single_helper( gpu_intrinsics: Intrinsics
                              , min_max: MinMax
                              , mut ray: Ray
                              , bvh: Bvh
                              , any_hit: bool
                              , root: i32
                              ) -> Hit {
    let mut hit = empty_hit(ray.tmax);
    let early_exit = || -> ! return(hit);
    let stack = alloc_stack();
    stack.push(1, undef());

    while !stack.is_empty() {
        let node_ref = stack.top();
        let node = bvh.node(node_ref.node - 1);

        let mut mask = 0;
        let tmp = make_small_stack(bvh.arity);
        for k in unroll(0, bvh.arity) @{
            let (t0, t1) = intersect_ray_box(min_max, false, ray, node.bbox(k));
            let hit = t0 <= t1;
            mask = mask | select(hit, 1 << k, 0);
            tmp.write(k, (node.child(k), t0));
        }

        if mask == 0 { stack.pop(); }
        else if bvh.arity == 2 {
            // Special case for N=2
            let (child1, t1) = tmp.read(0);
            let (child2, t2) = tmp.read(1);
            if mask == 3 {
                let order = select(any_hit || t1 < t2, (child1, child2), (child2, child1));
                let (first, second) = order;
                stack.set_top(first, undef());
                stack.push_after(second, undef());
            } else {
                stack.set_top(select(mask == 1, child1, child2), undef());
            }
        } else {
            // General case - slow
            stack.pop();
            let mut tmin = flt_max;
            for k in unroll(0, bvh.arity) @{
                if mask & (1 << k) != 0 {
                    let (child, t) = tmp.read(k);
                    if any_hit || t < tmin {
                        // Equivalent to stack.push(child, undef())
                        // but does not generate allocas for the stack's tmins
                        let top = stack.top();
                        stack.set_top(child, undef());
                        stack.push_after(top.node, undef());
                    } else {
                        stack.push_after(child, undef());
                    }
                    tmin = min_max.fminf(tmin, t);
                }
            }
        }

        while is_leaf(stack.top()) {
            let leaf_ref = stack.pop();
            let mut prim_id = !leaf_ref.node;
            while true {
                let prim = bvh.prim(prim_id++);

                for k in unroll(0, prim.size) @{
                    if !prim.is_valid(k) { break() }

                    let (was_hit, prim_hit) = prim.intersect(k, gpu_intrinsics, true /*mask*/, ray);
                    if was_hit {
                        hit = prim_hit;
                        ray.tmax = prim_hit.distance;
                    }

                    if any_hit && hit.prim_id >= 0 { early_exit() }
                }

                if prim.is_last { break() }
            }
        }
    }

    hit
}

// Wrapper  ------------------------------------------------------------------------

fn @gpu_traverse_single( acc: Accelerator
                       , gpu_intrinsics: Intrinsics
                       , min_max: MinMax
                       , bvh: Bvh
                       , rays: fn (i32, i32) -> Ray
                       , hits: fn (i32, i32, Hit) -> ()
                       , packet_size: i32
                       , num_packets: i32
                       , any_hit: bool
                       ) -> () {
    let block_size = 64;
    let ray_count  = num_packets * packet_size;
    let grid  = ((ray_count / block_size) * block_size, packet_size, 1);
    let block = (block_size, packet_size, 1);

    for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
        let (tidx, tidy, _) = tid;
        let (bidx, bidy, _) = bid;
        let (i, j) = (tidx() + bidx() * block_size, tidy());
        if (i + j) >= ray_count { continue() }

        hits(i, j, gpu_traverse_single_helper(gpu_intrinsics, min_max, rays(i, j), bvh, any_hit, 1 /*root*/));
    }
}
