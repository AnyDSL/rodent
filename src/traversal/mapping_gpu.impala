// BVH2 ----------------------------------------------------------------------------

struct Bvh2 {
    nodes: &[Bvh2Node],
    tris:  &[Bvh2Tri]
}

struct Bvh2Tri {
    v0: [f32 * 3],
    nx: f32,
    e1: [f32 * 3],
    ny: f32,
    e2: [f32 * 3],
    id: i32
}

struct Bvh2BBox {
    lo_x: f32, hi_x: f32,
    lo_y: f32, hi_y: f32,
    lo_z: f32, hi_z: f32
}

struct Bvh2Node {
    left_bb:  Bvh2BBox,
    right_bb: Bvh2BBox,
    left:  i32,
    right: i32,
    pad1:  i32,
    pad2:  i32
}

fn @make_bvh2_tri_nvvm(tri_ptr: &Bvh2Tri) -> BvhTri {
    let simd_ptr = tri_ptr as &[1][simd[f32 * 4]];
    let tri0 = nvvm_ldg4_f32(&simd_ptr(0));
    let tri1 = nvvm_ldg4_f32(&simd_ptr(1));
    let tri2 = nvvm_ldg4_f32(&simd_ptr(2));
    BvhTri {
        load: @ |i| {
            let v0 = make_vec3(tri0(0), tri0(1), tri0(2));
            let e1 = make_vec3(tri1(0), tri1(1), tri1(2));
            let e2 = make_vec3(tri2(0), tri2(1), tri2(2));
            let n  = make_vec3(tri0(3), tri1(3), vec3_cross(e1, e2).z);
            make_tri(v0, e1, e2, n)
        },
        id: @ |i| bitcast[i32](tri2(3))
    }
}

fn @make_bvh2_node_nvvm(node_ptr: &Bvh2Node) -> BvhNode {
    let simd_ptr = node_ptr as &[1][simd[f32 * 4]];
    let bb0 = nvvm_ldg4_f32(&simd_ptr(0));
    let bb1 = nvvm_ldg4_f32(&simd_ptr(1));
    let bb2 = nvvm_ldg4_f32(&simd_ptr(2));
    let children = nvvm_ldg4_i32(&simd_ptr(3) as &[1]simd[i32 * 4]);

    fn bbox(i: i32) -> BBox {
        if i == 0 {
            make_bbox(make_vec3(bb0(0), bb0(2), bb1(0)),
                      make_vec3(bb0(1), bb0(3), bb1(1)))
        } else {
            make_bbox(make_vec3(bb1(2), bb2(0), bb2(2)),
                      make_vec3(bb1(3), bb2(1), bb2(3)))
        }
    }

    BvhNode {
        bbox: @ |i| bbox(i),
        ordered_bbox: @ |i, _| undef[BBox](), // Not implemented
        child: @ |i| children(i)
    }
}

fn @make_bvh2_nvvm(bvh2: Bvh2) -> Bvh {
    Bvh {
        node: @ |j| make_bvh2_node_nvvm(&bvh2.nodes(j)),
        tri:  @ |j| make_bvh2_tri_nvvm(&bvh2.tris(j)),
        order: @ |_| undef[[i32 * 6]](), // Not implemented
        prefetch: @ |_| (), // Not implemented
        arity: 2,
        tri_size: 1
    }
}

// Ray-box intrinsics  -------------------------------------------------------------

fn @make_ray_box_intrinsics_nvvm() -> RayBoxIntrinsics {
    // Use video instructions to speed-up the ray-box test
    RayBoxIntrinsics {
        fminf: nvvm_fminf,
        fmaxf: nvvm_fmaxf,
        fminminf: @ |a, b, c| bitcast[f32](nvvm_minmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fmaxmaxf: @ |a, b, c| bitcast[f32](nvvm_maxmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fminmaxf: @ |a, b, c| bitcast[f32](nvvm_minmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fmaxminf: @ |a, b, c| bitcast[f32](nvvm_maxmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fcmp_le: @ |a, b| a <= b
    }
}

// Ray layouts  --------------------------------------------------------------------

fn @make_gpu_ray1_layout(rays: &mut [Ray1AoS], hits: &mut[Hit1AoS]) -> RayLayout {
    RayLayout {
        packet_size: 1,
        read_ray: @ |i, j| {
            let ray_ptr = &rays(i + j) as &[simd[f32 * 4]];
            let ray0 = ray_ptr(0);
            let ray1 = ray_ptr(1);
            make_ray(make_vec3(ray0(0), ray0(1), ray0(2)),
                     make_vec3(ray1(0), ray1(1), ray1(2)),
                     ray0(3), ray1(3))
        },
        read_hit: @ |i, j| {
            let hit_ptr = &hits(i + j) as &simd[f32 * 4];
            let hit = *hit_ptr;
            make_hit(-1, bitcast[i32](hit(0)), hit(1), make_vec2(hit(2), hit(3)))
        },
        write_ray: @ |i, j, ray| {
            let ray_ptr = &rays(i + j) as &mut [simd[f32 * 4]];
            ray_ptr(0) = simd[ray.org.x, ray.org.y, ray.org.z, ray.tmin];
            ray_ptr(1) = simd[ray.dir.x, ray.dir.y, ray.dir.z, ray.tmax];
        },
        write_hit: @ |i, j, hit| {
            let hit_ptr = &hits(i + j) as &mut simd[f32 * 4];
            *hit_ptr = simd[bitcast[f32](hit.prim_id), hit.distance, hit.uv_coords.x, hit.uv_coords.y];
        }
    }
}

// Mappings  -----------------------------------------------------------------------

fn @gpu_traverse_single_helper( gpu_intrinsics: Intrinsics
                              , ray_box_intrinsics: RayBoxIntrinsics
                              , mut ray: Ray
                              , bvh: Bvh
                              , any_hit: bool
                              , root: i32
                              ) -> Hit {
    let mut hit = empty_hit(ray.tmax);
    let early_exit = || -> ! return(hit);
    let stack = allocate_stack();
    stack.push(1, undef());

    while !stack.is_empty() {
        let node_ref = stack.top();
        let node = bvh.node(node_ref.node - 1);

        let mut mask = 0;
        let tmp = make_small_stack(bvh.arity);
        for k in unroll(0, bvh.arity) @{
            let (hit, t, _) = intersect_ray_box(ray_box_intrinsics, false, ray, node.bbox(k));
            mask = mask | select(hit, 1 << k, 0);
            tmp.write(k, (node.child(k), t));
        }

        if mask == 0 { stack.pop() }
        else if bvh.arity == 2 {
            // Special case for N=2
            let (child1, t1) = tmp.read(0);
            let (child2, t2) = tmp.read(1);
            if mask == 3 {
                let order = select(any_hit || t1 < t2, (child1, child2), (child2, child1));
                let (first, second) = order;
                stack.set_top(first, undef());
                stack.push_after(second, undef());
            } else {
                stack.set_top(select(mask == 1, child1, child2), undef());
            }
        } else {
            // General case - slow
            stack.pop();
            let mut tmin = flt_max;
            for k in unroll(0, bvh.arity) @{
                if mask & (1 << k) != 0 {
                    let (child, t) = tmp.read(k);
                    if any_hit || t < tmin {
                        // Equivalent to stack.push(child, undef())
                        // but does not generate allocas for the stack's tmins
                        let top = stack.top();
                        stack.set_top(child, undef());
                        stack.push_after(top.node, undef());
                    } else {
                        stack.push_after(child, undef());
                    }
                    tmin = gpu_intrinsics.fminf(tmin, t);
                }
            }
        }

        while is_leaf(stack.top()) {
            let leaf_ref = stack.top();
            let mut tri_id = !leaf_ref.node;
            while true {
                let tri = bvh.tri(tri_id++);

                for k in unroll(0, bvh.tri_size) @{
                    let (mask, t, u, v) = intersect_ray_tri(gpu_intrinsics, false, true, ray, tri.load(k));
                    if mask {
                        hit = make_hit(
                            undef[i32](),
                            tri_id & 0x7FFFFFFF,
                            t,
                            make_vec2(u, v)
                        );
                        ray.tmax = t;
                    }

                    if any_hit && hit.prim_id >= 0 { early_exit() }
                }

                if (bitcast[uint](tri.id(bvh.tri_size - 1)) & 0x80000000u) != 0u { break() }
            }

            stack.pop()
        }
    }

    hit
}

// Variants  -----------------------------------------------------------------------

fn @gpu_traverse_single( acc: Accelerator
                       , gpu_intrinsics: Intrinsics
                       , ray_box_intrinsics: RayBoxIntrinsics
                       , ray_layout: RayLayout
                       , bvh: Bvh
                       , any_hit: bool
                       , ray_count: i32
                       , root: i32
                       ) -> () {
    let block_size = 64;
    let grid  = ((ray_count / block_size) * block_size, ray_layout.packet_size, 1);
    let block = (block_size, ray_layout.packet_size, 1);

    for tid, bid, bdim, gdim, gid in acc.exec(grid, block) {
        let (tidx, tidy, _) = tid;
        let (bidx, bidy, _) = bid;
        let (i, j) = (tidx() + bidx() * block_size, tidy());
        if (i + j) >= ray_count { continue() }

        let ray = ray_layout.read_ray(i, j);
        let hit = gpu_traverse_single_helper(gpu_intrinsics, ray_box_intrinsics, ray, bvh, any_hit, root);
        ray_layout.write_hit(i, j, hit)
    }
}
