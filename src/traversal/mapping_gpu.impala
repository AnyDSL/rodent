// BVH layout ----------------------------------------------------------------------

struct Node2 {
    bounds: [f32 * 12], // lo_x, hi_x, lo_y, hi_y, ...
    child:  [i32 * 2],
    pad:    [i32 * 2]
}

struct Tri1 {
    v0: [f32 * 3],
    pad: i32,
    e1: [f32 * 3],
    geom_id: i32,
    e2: [f32 * 3],
    prim_id: i32
}

fn @make_gpu_bvh2_tri1(nodes: &[Node2], tris: &[Tri1], is_nvvm: bool) -> Bvh {
    // Use texture cache when generating code with NVVM
    let load4_f32 = @ |p, i| if is_nvvm { nvvm_ldg4_f32(&p(i)) } else { p(i) };
    let load4_i32 = @ |p, i| if is_nvvm { nvvm_ldg4_i32(&p(i)) } else { p(i) };

    Bvh {
        node: @ |j| {
            let simd_ptr = &nodes(j) as &[1][simd[f32 * 4]];
            let bb0 = load4_f32(simd_ptr, 0);
            let bb1 = load4_f32(simd_ptr, 1);
            let bb2 = load4_f32(simd_ptr, 2);
            let children = load4_i32(simd_ptr as &[1][simd[i32 * 4]], 3);

            Node {
                bbox: @ |i| {
                    if i == 0 {
                        make_bbox(make_vec3(bb0(0), bb0(2), bb1(0)),
                                  make_vec3(bb0(1), bb0(3), bb1(1)))
                    } else {
                        make_bbox(make_vec3(bb1(2), bb2(0), bb2(2)),
                                  make_vec3(bb1(3), bb2(1), bb2(3)))
                    }
                },
                ordered_bbox: @ |i, _| undef[BBox](), // Not implemented
                child: @ |i| children(i)
            }
        },
        prim: @ |j| {
            let simd_ptr = &tris(j) as &[1][simd[f32 * 4]];
            let tri0 = load4_f32(simd_ptr, 0);
            let tri1 = load4_f32(simd_ptr, 1);
            let tri2 = load4_f32(simd_ptr, 2);
            let prim_id = bitcast[i32](tri2(3));
            let geom_id = bitcast[i32](tri1(3));
            Prim {
                intersect: @ |_, math, ray, no_hit| {
                    let v0  = make_vec3(tri0(0), tri0(1), tri0(2));
                    let e1  = make_vec3(tri1(0), tri1(1), tri1(2));
                    let e2  = make_vec3(tri2(0), tri2(1), tri2(2));
                    let n   = vec3_cross(e1, e2);
                    let tri = make_tri(v0, e1, e2, n);
                    let (t, u, v) = intersect_ray_tri(math, false /*backface_culling*/, ray, tri, no_hit);
                    make_hit(geom_id, prim_id & 0x7FFFFFFF, t, make_vec2(u, v))
                },
                is_valid: @ |_| true,
                is_last: prim_id < 0,
                size: 1
            }
        },
        prefetch: @ |_| (), // Not implemented
        arity: 2
    }
}

// Min/Max functions  --------------------------------------------------------------

fn @make_nvvm_min_max() -> MinMax {
    // Use video instructions to speed-up the ray-box test
    MinMax {
        fminf: nvvm_fminf,
        fmaxf: nvvm_fmaxf,
        fminminf: @ |a, b, c| bitcast[f32](nvvm_minmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fmaxmaxf: @ |a, b, c| bitcast[f32](nvvm_maxmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fminmaxf: @ |a, b, c| bitcast[f32](nvvm_minmax(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        fmaxminf: @ |a, b, c| bitcast[f32](nvvm_maxmin(bitcast[i32](a), bitcast[i32](b), bitcast[i32](c))),
        is_integer: true
    }
}

fn @make_amdgpu_min_max() -> MinMax {
    make_min_max(ocml_fminf, ocml_fmaxf, false)
}

// Traversal kernel  ---------------------------------------------------------------

// Traverses a single ray at a time. 
fn @gpu_traverse_single_helper( gpu_intrinsics: Intrinsics
                              , min_max: MinMax
                              , mut ray: Ray
                              , bvh: Bvh
                              , any_hit: bool
                              , root: i32
                              ) -> Hit {
    let mut hit = empty_hit(ray.tmax);
    let early_exit = || -> ! return(hit);
    let stack = alloc_stack();
    stack.push(1, undef());

    while !stack.is_empty() {
        let node_ref = stack.top();
        let node = bvh.node(node_ref.node - 1);

        let mut mask = 0;
        let small_stack = make_small_stack(bvh.arity);
        for k in unroll(0, bvh.arity) {
            let (t0, t1) = intersect_ray_box(min_max, false, ray, node.bbox(k));
            if t0 <= t1 {
                mask |= 1 << k;
                small_stack.write(k, (node.child(k), t0));
            }
        }

        if bvh.arity == 2 {
            // Binary BVH
            if mask == 0 {
                stack.pop();
            } else {
                let (child0, t0) = small_stack.read(0);
                let (child1, t1) = small_stack.read(1);
                if mask == 3 {
                    let first  = select(t0 < t1, child0, child1);
                    let second = select(t0 < t1, child1, child0); 
                    stack.set_top(first, undef());
                    stack.push_after(second, undef());
                } else {
                    stack.set_top(select(mask == 1, child0, child1), undef());
                }
            }
        } else {
            // General case -- slower
            stack.pop();

            if mask != 0 {
                let mut tmin = ray.tmax;
                for k in unroll(0, bvh.arity) {
                    if mask & (1 << k) != 0 {
                        let (child, t) = small_stack.read(k);
                        if any_hit || t < tmin {
                            stack.push(child, undef());
                            tmin = t
                        } else {
                            stack.push_after(child, undef())
                        }
                    }
                }
            }
        }

        while is_leaf(stack.top()) {
            let leaf_ref = stack.pop();
            let mut prim_id = !leaf_ref.node;
            while true {
                let prim = bvh.prim(prim_id++);

                for k in unroll(0, prim.size) @{
                    if !prim.is_valid(k) { break() }

                    let prim_hit = prim.intersect(k, gpu_intrinsics, ray, continue);
                    hit = prim_hit;
                    ray.tmax = prim_hit.distance;

                    if any_hit && hit.prim_id >= 0 { early_exit() }
                }

                if prim.is_last { break() }
            }
        }
    }

    hit
}

// Wrapper  ------------------------------------------------------------------------

fn @gpu_traverse_single( acc: Accelerator
                       , gpu_intrinsics: Intrinsics
                       , min_max: MinMax
                       , bvh: Bvh
                       , rays: fn (i32, i32) -> Ray
                       , hits: fn (i32, i32, Hit) -> ()
                       , packet_size: i32
                       , num_packets: i32
                       , any_hit: bool
                       ) -> () {
    let block_size = 64;
    let ray_count  = num_packets * packet_size;
    let grid  = (round_up(num_packets, block_size), packet_size, 1);
    let block = (block_size, packet_size, 1);

    for work_item in acc.exec(grid, block) {
        let (i, j) = (work_item.tidx() + work_item.bidx() * block_size, work_item.tidy());
        if (i + j) >= ray_count { continue() }

        hits(i, j, gpu_traverse_single_helper(gpu_intrinsics, min_max, rays(i, j), bvh, any_hit, 1 /*root*/));
    }
}
