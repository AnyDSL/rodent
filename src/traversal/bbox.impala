struct BBox {
    min: fn () -> Vec3,
    max: fn () -> Vec3
}

struct RayBoxIntrinsics {
    fmaxmaxf: fn (float, float, float) -> float,
    fminminf: fn (float, float, float) -> float,
    fminmaxf: fn (float, float, float) -> float,
    fmaxminf: fn (float, float, float) -> float,
    fmaxf:    fn (float, float) -> float,
    fminf:    fn (float, float) -> float
}

fn bbox(min: Vec3, max: Vec3) -> BBox {
    BBox {
        min: || min,
        max: || max
    }
}

fn ray_box_intrinsics(fminf: fn (float, float) -> float,
                      fmaxf: fn (float, float) -> float) -> RayBoxIntrinsics {
    RayBoxIntrinsics {
        fminf: fminf,
        fmaxf: fmaxf,
        fminminf: |a, b, c| fminf(fminf(a, b), c),
        fmaxmaxf: |a, b, c| fmaxf(fmaxf(a, b), c),
        fminmaxf: |a, b, c| fmaxf(fminf(a, b), c),
        fmaxminf: |a, b, c| fminf(fmaxf(a, b), c)
    }
}

fn intersect_ray_box(math: RayBoxIntrinsics, ray: Ray, bbox: BBox, tmin: float, tmax: float, intr: fn (float, float) -> ()) -> () {
    let (inv_dir, inv_org) = (ray.inv_dir(), ray.inv_org());
    let t0 = vec3_sub(vec3_mul(inv_dir, bbox.min()), inv_org);
    let t1 = vec3_sub(vec3_mul(inv_dir, bbox.max()), inv_org);

    let tentry = math.fmaxmaxf(math.fminf(t0.x, t1.x), math.fminf(t0.y, t1.y), math.fminmaxf(t0.z, t1.z, tmin));
    let texit  = math.fminminf(math.fmaxf(t0.x, t1.x), math.fmaxf(t0.y, t1.y), math.fmaxminf(t0.z, t1.z, tmax));

    if tentry <= texit { intr(tentry, texit) }
}
