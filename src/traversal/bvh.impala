struct TraversalMapping {
    iterate_children:  fn (NodeId, float, Stack, fn (BBox, fn (float, float) -> ()) -> ()) -> (),
    iterate_triangles: fn (NodeId, float, Stack, fn (Tri, int) -> ()) -> (),
    is_leaf: fn (NodeId) -> bool
}

fn traverse_bvh(mapping: TraversalMapping, stack: Stack, ray: Ray, tmin: float, tmax: float) -> Hit {
    let mut hit = empty_hit(tmax);

    while !stack.is_empty() {
        let node = stack.top();
        for bbox, hit in mapping.iterate_children(node, hit.t, stack) {
            intersect_ray_box(ray, bbox, tmin, tmax, hit);
        }

        while mapping.is_leaf(stack.top()) {
            let leaf = stack.top();

            for tri, id in mapping.iterate_triangles(leaf, hit.t, stack) {
                with t, u, v in intersect_ray_tri(ray, tri, tmin, tmax) {
                    hit.id = id;
                    hit.t = t;
                    hit.u = u;
                    hit.v = v;
                }
            }

            stack.pop()
        }
    }

    hit
}
