struct TraversalMapping {
    iterate_children:  fn (NodeRef, float, Stack, fn (BBox, fn (float, float) -> ()) -> ()) -> (),
    iterate_triangles: fn (NodeRef, float, fn (Tri, int) -> ()) -> (),
    is_leaf: fn (NodeRef) -> bool,
    intrinsics: Intrinsics,
    ray_box_intrinsics: RayBoxIntrinsics
}

type Hit = fn (int, float, float, float) -> ();
type RayStream = fn (int) -> (Ray, float, float);
type HitStream = fn (int) -> Hit;

fn traverse_bvh(mapping: TraversalMapping, stack: Stack,
                ray: Ray, hit: Hit, tmin: float, tmax: float,
                all_hits: bool) -> () {
    let mut tri_id = -1;
    let mut t = tmax;
    let mut u = 0.0f;
    let mut v = 0.0f;

    // The traversal loop should not be unrolled
    while !$stack.is_empty() @{
        let node = stack.top();
        for bbox, hit in mapping.iterate_children(node, t, stack) {
            intersect_ray_box(mapping.ray_box_intrinsics, ray, bbox, tmin, t, hit);
        }

        while mapping.is_leaf(stack.top()) {
            let leaf = stack.top();

            for tri, id in mapping.iterate_triangles(leaf, t) {
                with t_, u_, v_ in intersect_ray_tri(mapping.intrinsics, ray, tri, tmin, t) {
                    tri_id = id;
                    t = t_;
                    u = u_;
                    v = v_;

                    if all_hits {
                        hit(tri_id, t_, u_, v_)
                    }
                }
            }

            stack.pop()
        }
    }

    if !all_hits {
        hit(tri_id, t, u, v)
    }
}
