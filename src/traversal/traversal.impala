type IterateChildrenFn   = fn (Stack, &mut Ray, &mut Hit, fn (BBox) -> (bool, float, float)) -> ();
type IteratePrimitivesFn = fn (NodeRef, Ray, fn (Intersector) -> ()) -> ();

// Structure containing the mapping of the traversal algorithm for a particular device.
struct TraversalMapping {
    intrinsics:         Intrinsics,
    ray_box_intrinsics: RayBoxIntrinsics,
    ray_box_ordered:    bool,

    iterate_children:   IterateChildrenFn,
    iterate_primitives: IteratePrimitivesFn,
}

// Structure containing the configuration of the traversal algorithm for a particular use case.
struct TraversalConfig {
    any_hit: bool
}

fn traverse_bvh(mapping: TraversalMapping, config: TraversalConfig, stack: Stack, mut ray: Ray) -> Hit @{
    let mut hit = empty_hit(ray.tmax);

    // The traversal loop should not be unrolled
    while !$stack.is_empty() {
        // Intersect the bounding box of every child of the current node
        // This may require to update the current traversal result
        for bbox in mapping.iterate_children(stack, &mut ray, &mut hit) {
            @intersect_ray_box(mapping.ray_box_intrinsics, mapping.ray_box_ordered, ray, bbox)
        };

        // Process leaves
        while unlikely(is_leaf(stack.top())) {
            // Process primitives, if any
            for intersector in mapping.iterate_primitives(stack.top(), ray) @{
                with intr in @intersector(mapping.intrinsics, ray) @{
                    hit.prim_id   = intr.prim_id;
                    hit.distance  = intr.distance;
                    hit.uv_coords = intr.uv_coords;
                    ray.tmax      = intr.distance;
                }

                if config.any_hit && all(hit.prim_id >= 0) { return(hit) }
            }

            stack.pop()
        }
    }

    hit
}
