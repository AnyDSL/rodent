// BVH layouts ---------------------------------------------------------------------

struct Tri4 {
    v0: [[f32 * 4] * 3],
    e1: [[f32 * 4] * 3],
    e2: [[f32 * 4] * 3],
    n:  [[f32 * 4] * 3],
    prim_id: [i32 * 4],
    geom_id: [i32 * 4]
}

struct Node4 {
    bounds: [[f32 * 4] * 6],
    child:   [i32 * 4],
    pad:     [i32 * 4]
}

struct Node8 {
    bounds: [[f32 * 8] * 6],
    child:   [i32 * 8],
    pad:     [i32 * 8]
}

fn @make_cpu_tri4(tris: &[Tri4]) -> fn (i32) -> Prim {
    @ |j| Prim {
        intersect = @ |i, math, ray| -> Option[Hit] {
            let tri_ptr = rv_align(&tris(j) as &i8, 32) as &Tri4;
            let v0  = make_vec3(tri_ptr.v0(0)(i), tri_ptr.v0(1)(i), tri_ptr.v0(2)(i));
            let e1  = make_vec3(tri_ptr.e1(0)(i), tri_ptr.e1(1)(i), tri_ptr.e1(2)(i));
            let e2  = make_vec3(tri_ptr.e2(0)(i), tri_ptr.e2(1)(i), tri_ptr.e2(2)(i));
            let n   = make_vec3(tri_ptr.n (0)(i), tri_ptr.n (1)(i), tri_ptr.n (2)(i));
            let tri = make_tri(v0, e1, e2, n);
            match intersect_ray_tri(math, false /*backface_culling*/, ray, tri) {
                Option[(f32, f32, f32)]::Some(t, u, v) => {
                    let prim_id = tri_ptr.prim_id(i) & 0x7FFFFFFF;
                    let geom_id = tri_ptr.geom_id(i);
                    make_option(make_hit(geom_id, prim_id, t, make_vec2(u, v)))
                },
                Option[(f32, f32, f32)]::None => Option[Hit]::None
            }
        },
        is_valid = @ |i| tris(j).prim_id(i) != -1,
        is_last = tris(j).prim_id(3) < 0,
        size = 4
    }
}

fn @make_cpu_bvh4_tri4(nodes: &[Node4], tris: &[Tri4]) = Bvh {
    node = @ |j| Node {
        bbox = @ |i| {
            make_bbox(make_vec3(nodes(j).bounds(0)(i), nodes(j).bounds(2)(i), nodes(j).bounds(4)(i)),
                      make_vec3(nodes(j).bounds(1)(i), nodes(j).bounds(3)(i), nodes(j).bounds(5)(i)))
        },
        ordered_bbox = @ |i, octant| {
            let ptr = &nodes(j).bounds as &[f32];
            let align_ptr = @ |i: i32| rv_align(&ptr(i) as &i8, 16) as &[f32];
            let ox = (octant & 1) << 2;
            let oy = (octant & 2) << 1;
            let oz = (octant & 4);
            make_bbox(
                make_vec3(
                    align_ptr(4  - ox)(i),
                    align_ptr(12 - oy)(i),
                    align_ptr(20 - oz)(i)
                ),
                make_vec3(
                    align_ptr(0  + ox)(i),
                    align_ptr(8  + oy)(i),
                    align_ptr(16 + oz)(i)
                )
            )
        },
        child = @ |i| nodes(j).child(i)
    },
    prim = make_cpu_tri4(tris),
    prefetch = @ |id| {
        let ptr = select(id < 0, &tris(!id) as &[u8], &nodes(id - 1) as &[u8]);
        cpu_prefetch_bytes(ptr, 128)
    },
    arity = 4
};

fn @make_cpu_bvh8_tri4(nodes: &[Node8], tris: &[Tri4]) = Bvh {
    node = @ |j| Node {
        bbox = @ |i| {
            make_bbox(make_vec3(nodes(j).bounds(0)(i), nodes(j).bounds(2)(i), nodes(j).bounds(4)(i)),
                      make_vec3(nodes(j).bounds(1)(i), nodes(j).bounds(3)(i), nodes(j).bounds(5)(i)))
        },
        ordered_bbox = @ |i, octant| {
            let ptr = &nodes(j).bounds as &[f32];
            let align_ptr = @ |i: i32| rv_align(&ptr(i) as &i8, 32) as &[f32];
            let ox = (octant & 1) << 3;
            let oy = (octant & 2) << 2;
            let oz = (octant & 4) << 1;
            make_bbox(
                make_vec3(
                    align_ptr(8  - ox)(i),
                    align_ptr(24 - oy)(i),
                    align_ptr(40 - oz)(i)
                ),
                make_vec3(
                    align_ptr(0  + ox)(i),
                    align_ptr(16 + oy)(i),
                    align_ptr(32 + oz)(i)
                )
            )
        },
        child = @ |i| nodes(j).child(i)
    },
    prim = make_cpu_tri4(tris),
    prefetch = @ |id| {
        let ptr = select(id < 0, &tris(!id) as &[u8], &nodes(id - 1) as &[u8]);
        cpu_prefetch_bytes(ptr, 256)
    },
    arity = 8
};

// Min/max functions ---------------------------------------------------------------

// Integer min/max instead of floating point min/max (~10-15% faster on x86, not measured on ARM)
// On x86, requires AVX2 when vectorizing with a vector length of 8, and
// requires SSE2 when vectorizing with a vector length of 4
fn @make_cpu_int_min_max() -> MinMax {
    let fminf = @ |x: f32, y: f32| {
        let (x_, y_) = (bitcast[i32](x), bitcast[i32](y));
        bitcast[f32](select(x_ < y_, x_, y_))
    };
    let fmaxf = @ |x: f32, y: f32| {
        let (x_, y_) = (bitcast[i32](x), bitcast[i32](y));
        bitcast[f32](select(x_ > y_, x_, y_))
    };
    make_min_max(fminf, fmaxf, true)
}

// Traversal kernels ---------------------------------------------------------------

// Traverses a BVH with a single ray.
fn @cpu_traverse_single_helper( mut ray: Ray
                              , octant: RayOctant
                              , min_max: MinMax
                              , bvh: Bvh
                              , any_hit: bool
                              , root: i32
                              ) -> Hit {
    let sorting_network = match bvh.arity {
        8 => batcher_sort,
        _ => bose_nelson_sort
    };
    let branchless = bvh.arity > 4;

    let mut hit = empty_hit(ray.tmax);
    let stack = alloc_stack();

    stack.push(root, ray.tmin);

    let extract_hit = @ |hit: Hit, lane: i32| Hit {
        geom_id   = bitcast[i32](rv_extract(bitcast[f32](hit.geom_id), lane)),
        prim_id   = bitcast[i32](rv_extract(bitcast[f32](hit.prim_id), lane)),
        distance  = rv_extract(hit.distance, lane),
        uv_coords = make_vec2(rv_extract(hit.uv_coords.x, lane), rv_extract(hit.uv_coords.y, lane))
    };

    // Traversal loop
    vectorize(bvh.arity, |i| {
        while true {
            let restart = continue;
            let exit    = break;

            if unlikely(stack.is_empty()) { exit() }
            // Cull nodes that cannot be intersected by the ray
            if !any_hit && unlikely(stack.top().tmin > ray.tmax) {
                stack.pop();
                restart()
            }

            // Intersect inner nodes
            while likely(is_inner(stack.top())) {
                let node = bvh.node(stack.pop().node - 1);

                // Intersect children
                let (tentry, texit) = intersect_ray_box(min_max, true /*ordered*/, ray, node.ordered_bbox(i, octant));
                let mask = if min_max.is_integer {
                    // Special case when integer comparisons are faster than floating point comparisons
                    !rv_ballot(bitcast[i32](texit) < bitcast[i32](tentry)) & ((1 << bvh.arity) - 1)
                } else {
                    rv_ballot(tentry <= texit)
                };
                // Restart the loop when no intersection is found to trigger culling
                if likely(mask == 0) {
                    if any_hit { continue() } else { restart() }
                }

                // Push intersected nodes on the stack, prefetch those
                // that are closer than the node currently on top of the stack
                let mut num_intrs = 0;
                for lane in cpu_one_bits(mask) {
                    let child_id = node.child(lane);

                    num_intrs++;

                    let t = rv_extract(tentry, lane);
                    if any_hit || t < stack.top().tmin {
                        if !any_hit { bvh.prefetch(child_id); }
                        stack.push(child_id, t);
                    } else {
                        stack.push_after(child_id, t);
                    }
                }

                if !any_hit && num_intrs >= 3 {
                    // Sort them by distance along the ray
                    for i in unroll(3, bvh.arity + 1) {
                        if i == bvh.arity || num_intrs == i {
                            stack.sort_n(i, @ |a, b| a < b, sorting_network, branchless);
                            break()
                        }
                    }
                }
            }

            if any_hit && unlikely(stack.is_empty()) { exit() }

            // Intersect leaves here
            let mut prim_id = !stack.pop().node;
            let mut terminated = false;
            while true {
                let prim = bvh.prim(prim_id++);

                // Workaround for a currently unsolved bug in RV: Extract the option and use a boolean flag to guide RV into emitting correct code
                // Intersect primitives
                vectorize(prim.size, |j| {
                    if prim.is_valid(j) {
                        let mut hit2: Hit = empty_hit(flt_max);
                        let mut did_hit = false;

                        match prim.intersect(j, cpu_intrinsics, ray) {
                            Option[Hit]::Some(prim_hit) => {
                                hit2 = prim_hit;
                                did_hit = true;
                            },
                            _ => {}
                        }

                        if rv_ballot(did_hit) != 0 {
                            if any_hit {
                                // Early exit mode
                                let lane = cpu_ctz32(rv_ballot(did_hit), true);
                                hit = extract_hit(hit2, lane);
                                terminated = true;
                            } else {
                                let hit_distance = select(rv_mask(), hit2.distance, flt_max);
                                let min_distance = cpu_reduce(hit_distance, prim.size, min_max.fminf);
                                let lane = cpu_index_of(hit_distance, min_distance);
                                hit = extract_hit(hit2, lane);
                                ray.tmax = hit.distance;
                            }
                        }
                    }
                });

                // Sentinel test
                if prim.is_last { break() }
            }

            // Early exit test delayed until exit primitive intersection loop
            if any_hit && terminated { exit() }
        }
    });
    hit
}

// Traverses a BVH with a packet of rays, assuming execution inside a vectorized region.
fn @cpu_traverse_hybrid_helper( mut ray: Ray
                              , vector_width: i32
                              , min_max: MinMax
                              , bvh: Bvh
                              , single: bool
                              , any_hit: bool
                              , root: i32
                              ) -> Hit {
    let switch_threshold = match vector_width {
        4  => 3,
        8  => if bvh.arity == 4 { 4 } else { 6 },
        16 => 7,
        _  => vector_width / 2
    };

    let mut hit = empty_hit(ray.tmax);
    let mut terminated = false;
    let stack = alloc_stack();
    stack.push(root, ray.tmin);

    let octant = ray_octant(ray);

    let load_ray = @ |ray_ptr: &Ray, lane: i32| Ray {
        org = make_vec3(rv_load(&ray_ptr.org.x, lane), rv_load(&ray_ptr.org.y, lane), rv_load(&ray_ptr.org.z, lane)),
        dir = make_vec3(rv_load(&ray_ptr.dir.x, lane), rv_load(&ray_ptr.dir.y, lane), rv_load(&ray_ptr.dir.z, lane)),
        inv_org = make_vec3(rv_load(&ray_ptr.inv_org.x, lane), rv_load(&ray_ptr.inv_org.y, lane), rv_load(&ray_ptr.inv_org.z, lane)),
        inv_dir = make_vec3(rv_load(&ray_ptr.inv_dir.x, lane), rv_load(&ray_ptr.inv_dir.y, lane), rv_load(&ray_ptr.inv_dir.z, lane)),
        tmin = rv_load(&ray_ptr.tmin, lane),
        tmax = rv_load(&ray_ptr.tmax, lane)
    };

    let store_hit = @ |hit_ptr: &mut Hit, lane: i32, hit: Hit| {
        rv_store(&mut hit_ptr.distance, lane, hit.distance);
        rv_store(&mut hit_ptr.uv_coords.x, lane, hit.uv_coords.x);
        rv_store(&mut hit_ptr.uv_coords.y, lane, hit.uv_coords.y);
        rv_store(bitcast[&mut f32](&mut hit_ptr.prim_id), lane, bitcast[f32](hit.prim_id));
        rv_store(bitcast[&mut f32](&mut hit_ptr.geom_id), lane, bitcast[f32](hit.geom_id));
    };

    while true {
        let exit = break;
        let cull = continue;

        // Cull nodes and switch to single ray tracing when SIMD utilization is too low
        while true {
            if unlikely(stack.is_empty()) { exit() }
            let active = (stack.top().tmin <= ray.tmax) & !terminated;
            let mask = rv_ballot(active);
            if likely(mask != 0) {
                if single && cpu_popcount32(mask) <= switch_threshold {
                    for lane in cpu_one_bits(mask) {
                        let lane_ray = load_ray(&ray, lane);
                        let lane_octant = bitcast[RayOctant](rv_extract(bitcast[f32](octant), lane));
                        let lane_hit = cpu_traverse_single_helper(lane_ray, lane_octant, min_max, bvh, any_hit, stack.top().node);
                        if lane_hit.prim_id >= 0 {
                            store_hit(&mut hit, lane, lane_hit);
                            if !any_hit { rv_store(&mut ray.tmax, lane, lane_hit.distance); }
                        }
                    }
                    if any_hit { terminated = hit.prim_id >= 0; }
                } else {
                    break()
                }
            }
            stack.pop();
        }

        // Intersect inner nodes
        while likely(is_inner(stack.top())) {
            let node = bvh.node(stack.pop().node - 1);

            // Intersect children
            let mut pushed = false;
            for i in unroll(0, bvh.arity) {
                let child_id = node.child(i);
                if unlikely(child_id == 0) { break() }

                let (tentry, texit) = intersect_ray_box(min_max, false /*ordered*/, ray, node.bbox(i));
                // Special case when integer comparisons are faster than floating point comparisons
                let miss = if min_max.is_integer { bitcast[i32](texit) < bitcast[i32](tentry)        } else { texit < tentry };
                let push = if min_max.is_integer { !rv_ballot(miss) & ((1 << vector_width) - 1) != 0 } else { !rv_all(miss)  };
                if push {
                    // Important: prevent nodes that are not intersected
                    // from being traversed with the single ray kernel
                    let thit = select(miss, flt_max, tentry);
                    if any_hit || rv_any(stack.top().tmin > thit) {
                        bvh.prefetch(child_id);
                        stack.push(child_id, thit);
                    } else {
                        stack.push_after(child_id, thit);
                    }
                    pushed = true;
                }
            }
            if unlikely(!pushed) { cull() }
        }

        if unlikely(is_leaf(stack.top())) {
            let mut active = (stack.top().tmin <= ray.tmax) & !terminated;
            let mut prim_id = !stack.pop().node;
            while true {
                let prim = bvh.prim(prim_id++);
                for i in range(0, prim.size) {
                    if unlikely(!prim.is_valid(i)) { break() }

                    if active {
                        match prim.intersect(i, cpu_intrinsics, ray) {
                            Option[Hit]::Some(prim_hit) => {
                                hit = prim_hit;
                                ray.tmax = prim_hit.distance;
                                if any_hit {
                                    terminated = true;
                                    active = false;
                                }
                            },
                            _ => ()
                        }
                    }
                    if any_hit && unlikely(rv_all(terminated)) { exit() }
                }

                // Sentinel test
                if unlikely(prim.is_last) { break() }
            }
        }
    }

    hit
}

// Wrappers ------------------------------------------------------------------------

fn @cpu_traverse_hybrid( min_max: MinMax
                       , bvh: Bvh
                       , rays: fn (i32, i32) -> Ray
                       , hits: fn (i32, i32, Hit) -> ()
                       , packet_size: i32
                       , num_packets: i32
                       , single: bool
                       , any_hit: bool
                       ) -> () {
    for i in range(0, num_packets) {
        vectorize(packet_size, |j| {
            hits(i, j, cpu_traverse_hybrid_helper(rays(i, j), packet_size, min_max, bvh, single, any_hit, 1 /*root*/))
        });
    }
}

fn @cpu_traverse_single( min_max: MinMax
                       , bvh: Bvh
                       , rays: fn (i32, i32) -> Ray
                       , hits: fn (i32, i32, Hit) -> ()
                       , packet_size: i32
                       , num_packets: i32
                       , any_hit: bool
                       ) -> () {
    for i in range(0, num_packets * packet_size) {
        let (j, k) = (i / packet_size, i % packet_size);
        let ray = rays(j, k);
        let octant = ray_octant(ray);
        hits(j, k, cpu_traverse_single_helper(ray, octant, min_max, bvh, any_hit, 1 /*root*/))
    }
}
