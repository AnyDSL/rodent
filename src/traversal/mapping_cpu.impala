struct Bvh4 {
    nodes: &[Bvh4Node],
    tris:  &[Bvh4Tri]
}

struct Bvh4Tri {
    v0: [[float * 4] * 3],
    e1: [[float * 4] * 3],
    e2: [[float * 4] * 3],
    n:  [[float * 4] * 3],
    id:  [int   * 4]
}

struct Bvh4Node {
    min:   [[float * 4] * 3],
    max:   [[float * 4] * 3],
    child:  [int   * 4]
}

extern "C" {
    fn "rv_any"     any(bool) -> bool;
    fn "rv_all"     all(bool) -> bool;
    fn "rv_ballot"  ballot(bool) -> int;
    fn "rv_extract" extractf(float, int) -> float;
    fn "rv_extract" extracti(int, int) -> int;
}

fn ray_box_intrinsics_avx() -> RayBoxIntrinsics {
    ray_box_intrinsics(cpu_intrinsics.fminf, cpu_intrinsics.fmaxf)
}

fn ray_box_intrinsics_avx2() -> RayBoxIntrinsics {
    let fminf = |x, y| {
        let (x_, y_) = (bitcast[int](x), bitcast[int](y));
        bitcast[float](if x < y { x } else { y })
    };
    let fmaxf = |x, y| {
        let (x_, y_) = (bitcast[int](x), bitcast[int](y));
        bitcast[float](if x > y { x } else { y })
    };
    ray_box_intrinsics(fminf, fmaxf)
}

fn load_bvh4_tri(tri: &[Bvh4Tri], i: int) -> Tri {
    tri(vec3(t.v0(0)(i), t.v0(1)(i), t.v0(2)(i)),
        vec3(t.e1(0)(i), t.e1(1)(i), t.e1(2)(i)),
        vec3(t.e2(0)(i), t.e2(1)(i), t.e2(2)(i)),
        vec3(t. n(0)(i), t. n(1)(i), t. n(2)(i))
}

fn cpu_traverse_bvh_packet(bvh: &Bvh4, rays: RayStream, hits: HitStream, ray_count: int) -> () {
    for i in range_step(0, ray_count, 8) {
        for j in vectorize(8, 32, 0, 8) {
            let (ray, tmin, tmax) = rays(i + j);
            let hit = hits(i + j);
            let stack = alloc_stack();

            stack.push(0, tmin);

            let mapping = TraversalMapping {
                iterate_children: |node_ref, tmax, stack, body, exit| -> ! {
                    stack.pop();

                    if node_ref.tmin > tmax { exit() }

                    let node = bvh.nodes(node_ref.node);
                    for k in range(0, 4) {
                        let bbox = bbox(vec3(node.min(0)(k), node.min(1)(k), node.min(2)(k)),
                                        vec3(node.max(0)(k), node.max(1)(k), node.max(2)(k)));

                        body(bbox, |tentry, texit| {
                            if any(true) {
                                if any(stack.top().tmin > tentry) @{
                                    stack.push(node.child(k), tentry);
                                } else @{
                                    stack.push_after(node.child(k), tentry);
                                }
                            }
                        });
                    }
                },
                iterate_triangles: |leaf_ref, tmax, body, exit| -> ! {
                    if leaf_ref.tmin > tmax { exit() }

                    let mut tri_id = !leaf_ref.node;
                    while true {
                        let t = bvh.tris(tri_id++);
                        for k in range(0, 4) {
                            @body(load_bvh4_tri(t, k), t.id(k));
                        }
                        if t.id(0) < 0 { break() }
                    }
                },
                is_leaf: |node_ref| node_ref.node < 0,
                intrinsics: cpu_intrinsics,
                ray_box_intrinsics: ray_box_intrinsics_avx()
            };

            traverse_bvh(mapping, stack, ray, hit, tmin, tmax, false);
        }
    }
}

fn cpu_traverse_bvh_single(bvh: &Bvh4, rays: RayStream, hits: HitStream, ray_count: int) -> () {
    for i in range(0, ray_count) {
        let (ray, tmin, tmax) = rays(i);
        let hit = hits(i);

        for j in vectorize(4, 16, 0, 4) {
            let stack = alloc_stack();

            stack.push(0, tmin);

            let mapping = TraversalMapping {
                iterate_children: |node_ref, tmax, stack, body, exit| -> ! {
                    stack.pop();

                    if node_ref.tmin > tmax { exit() }

                    let node = bvh.nodes(node_ref.node);
                    let bbox = bbox(vec3(node.min(0)(j), node.min(1)(j), node.min(2)(j)),
                                    vec3(node.max(0)(j), node.max(1)(j), node.max(2)(j)));

                    let mut child = -1;
                    let mut tentry : float;
                    body(bbox, |t, _| {
                        tentry = t;
                        child = node.child(j);
                    });

                    let mut count = 0;
                    for k in @range(0, 4) {
                        let c = extracti(child, k);
                        if c >= 0 {
                            stack.push(c, extractf(tentry, k));
                            count++;
                        }
                    }

                    if count < 2 { exit() }
                    if count == 2 {
                        @stack.sort_n(2);
                    } else if count == 3 {
                        @stack.sort_n(3);
                    } else if count == 4 {
                        @stack.sort_n(4);
                    }
                },
                iterate_triangles: |leaf_ref, tmax, body, exit| -> ! {
                    if leaf_ref.tmin > tmax { exit() }

                    let mut tri_id = !leaf_ref.node;
                    while true {
                        let t = bvh.tris(tri_id++);
                        @body(load_bvh4_tri(t, j), t.id(j));
                        if t.id(0) < 0 { break() }
                    }
                },
                is_leaf: |node_ref| node_ref.node < 0,
                intrinsics: cpu_intrinsics,
                ray_box_intrinsics: ray_box_intrinsics_avx()
            };

            traverse_bvh(mapping, stack, ray, hit, tmin, tmax, false);
        }
    }
}
