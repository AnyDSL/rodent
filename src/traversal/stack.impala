struct NodeId {
    id: int
}

struct Stack {
    push:     fn (NodeId, float) -> (),
    insert:   fn (NodeId, float) -> (),
    sort_n:   fn (int) -> (),
    pop:      fn () -> (),
    top:      fn () -> NodeId,
    tmin:     fn () -> float,
    is_empty: fn () -> bool
}

fn alloc_stack() -> Stack {
    let sentinel = bitcast[int](0x7FFFFFFu);
    let mut nodes : [int * 64];
    let mut tmins : [float * 64];
    let mut node = sentinel;
    let mut tmin = flt_max;
    let mut ptr = -1;

    fn cmp_swap(b: bool, s: int, i: int, j: int) -> () {
        let d = (j - i) / 2;
        for k in range(i, i + d) {
            if (tmins(s + k) > tmins(s + k + d)) == b {
                let n = nodes(s);
                let t = tmins(s);
                nodes(s) = nodes(s + k + d);
                tmins(s) = tmins(s + k + d);
                nodes(s + k + d) = n;
                tmins(s + k + d) = t;
            }
        }
    }

    fn merge(b: bool, s: int, i: int, j: int) -> () {
        if i < j - 1 {
            let m = (i + j) / 2;
            cmp_swap(b, s, i, j);
            merge(b, s, i, m);
            merge(b, s, m, j)
        }
    }

    fn sort(b: bool, s: int, i: int, j: int) -> () {
        if i < j - 1 {
            let m = (i + j) / 2;
            sort(true, s, i, m);
            sort(false, s, m, j);
            merge(b, s, i, j);
        }
    }

    Stack {
        push: |n, t| {
            ptr++;
            nodes(ptr) = node;
            tmins(ptr) = tmin;
            node = n.id;
            tmin = t;
        },
        insert: |n, t| {
            ptr++;
            nodes(ptr) = n.id;
            tmins(ptr) = t;
        },
        sort_n: |n| {
            ptr++;
            nodes(ptr) = node;
            tmins(ptr) = tmin;
            sort(true, ptr - n + 1, 0, n);
            node = nodes(ptr);
            tmin = tmins(ptr);
            ptr--;
        },
        pop: || {
            node = nodes(ptr);
            tmin = tmins(ptr);
            ptr--;
        },
        top: || NodeId { id: node },
        tmin: || tmin,
        is_empty: || node == sentinel
    }
}
