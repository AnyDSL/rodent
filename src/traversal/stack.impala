struct NodeRef {
    node: int,
    tmin: float
}

struct Stack {
    push:       fn (int, float) -> (),
    push_after: fn (int, float) -> (),
    set_top:    fn (int, float) -> (),
    sort_n:     fn (int) -> (),
    pop:        fn () -> (),
    top:        fn () -> NodeRef,
    is_empty:   fn () -> bool
}

fn allocate_stack() -> Stack {
    let sentinel = 0x7FFFFFFF;
    let mut nodes : [int * 64];
    let mut tmins : [float * 64];
    let mut node = sentinel;
    let mut tmin = flt_max;
    let mut ptr = -1;

    Stack {
        push: |n, t| {
            ptr++;
            nodes(ptr) = node;
            tmins(ptr) = tmin;
            node = n;
            tmin = t;
        },
        push_after: |n, t| {
            ptr++;
            nodes(ptr) = n;
            tmins(ptr) = t;
        },
        set_top: |n, t| {
            node = n;
            tmin = t;
        },
        sort_n: |n| {
            ptr++;
            nodes(ptr) = node;
            tmins(ptr) = tmin;
            let cmp = |i, j| { tmins(ptr - i) > tmins(ptr - j) };
            let swap = |i, j| {
                let t = tmins(ptr - i);
                let n = nodes(ptr - i);
                tmins(ptr - i) = tmins(ptr - j);
                nodes(ptr - i) = nodes(ptr - j);
                tmins(ptr - j) = t;
                nodes(ptr - j) = n;
            };
            bose_nelson_sort(n, cmp, swap);
            node = nodes(ptr);
            tmin = tmins(ptr);
            ptr--;
        },
        pop: || {
            node = nodes(ptr);
            tmin = tmins(ptr);
            ptr--;
        },
        top: || NodeRef { node: node, tmin: tmin },
        is_empty: || node == sentinel
    }
}
