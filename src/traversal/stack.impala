struct NodeRef {
    node: int,
    tmin: float
}

struct Stack {
    push:       fn (int, float) -> (),
    push_after: fn (int, float) -> (),
    set_top:    fn (int, float) -> (),
    sort_n:     fn (int) -> (),
    pop:        fn () -> (),
    top:        fn () -> NodeRef,
    is_empty:   fn () -> bool
}

fn allocate_stack() -> Stack {
    let sentinel = 0x7FFFFFFF;
    let mut nodes : [int * 64];
    let mut tmins : [float * 64];
    let mut node = sentinel;
    let mut tmin = flt_max;
    let mut ptr = -1;

    fn cmp_swap(b: bool, s: int, i: int, j: int) -> () {
        let d = (j - i) / 2;
        let node_ptr = &mut nodes(s) as &mut [int];
        let tmin_ptr = &mut tmins(s) as &mut [float];
        for k in range(i, i + d) {
            let t0 = tmin_ptr(k);
            let t1 = tmin_ptr(k + d);
            if (t0 < t1) == b {
                let n0 = node_ptr(k);
                let n1 = node_ptr(k + d);
                node_ptr(k) = n1;
                tmin_ptr(k) = t1;
                node_ptr(k + d) = n0;
                tmin_ptr(k + d) = t0;
            }
        }
    }

    fn merge(b: bool, s: int, i: int, j: int) -> () {
        if i < j - 1 {
            let m = (i + j) / 2;
            cmp_swap(b, s, i, j);
            merge(b, s, i, m);
            merge(b, s, m, j)
        }
    }

    fn sort(b: bool, s: int, i: int, j: int) -> () {
        if i < j - 1 {
            let m = (i + j) / 2;
            sort(true, s, i, m);
            sort(false, s, m, j);
            merge(b, s, i, j);
        }
    }

    Stack {
        push: |n, t| {
            ptr++;
            nodes(ptr) = node;
            tmins(ptr) = tmin;
            node = n;
            tmin = t;
        },
        push_after: |n, t| {
            ptr++;
            nodes(ptr) = n;
            tmins(ptr) = t;
        },
        set_top: |n, t| {
            node = n;
            tmin = t;
        },
        sort_n: |n| {
            ptr++;
            nodes(ptr) = node;
            tmins(ptr) = tmin;
            pe_info("n", n);
            sort(true, ptr - n + 1, 0, n);
            node = nodes(ptr);
            tmin = tmins(ptr);
            ptr--;
        },
        pop: || {
            node = nodes(ptr);
            tmin = tmins(ptr);
            ptr--;
        },
        top: || NodeRef { node: node, tmin: tmin },
        is_empty: || node == sentinel
    }
}
