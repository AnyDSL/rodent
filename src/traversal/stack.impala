struct Stack {
    push:     fn (int, float) -> (),
    slot:     fn (int, float) -> (),
    pop:      fn () -> (),
    top:      fn () -> int,
    tmin:     fn () -> float,
    is_empty: fn () -> bool
}

fn allocate_stack() -> Stack {
    let sentinel = bitcast[int](0x7FFFFFFu);
    let mut nodes : [int * 64];
    let mut tmins : [float * 64];
    let mut node = sentinel;
    let mut tmin = flt_max;
    let mut ptr = -1;

    Stack {
        push: |n, t| {
            ptr++;
            nodes(ptr) = node;
            tmins(ptr) = tmin;
            node = n;
            tmin = t;
        },
        slot: |n, t| {
            ptr++;
            nodes(ptr) = n;
            tmins(ptr) = t;
        },
        pop: || {
            node = nodes(ptr);
            tmin = tmins(ptr);
            ptr--;
        },
        top: || node,
        tmin: || tmin,
        is_empty: || node == sentinel
    }
}
