struct Ray {
    org: Vec3,     // Origin of the ray
    dir: Vec3,     // Direction of the ray
    inv_dir: Vec3, // Inverse of the direction
    inv_org: Vec3, // Origin multiplied by the inverse of the direction
    tmin: float,   // Minimum distance from the origin
    tmax: float    // Maximum distance from the origin
}

struct Hit {
    distance:  float,  // Distance to the intersection point
    uv_coords: Vec2,   // Surface coordinates
    prim_id:   int,    // Primitive identifier, or -1 (no intersection found)
    inst_id:   int     // Instance identifier, or -1 (no instance found)
}

struct Tri {
    v0: Vec3,          // First vertex
    v1: Vec3,          // Second vertex
    v2: Vec3,          // Third vertex
    e1: Vec3,          // First edge (= v0 - v1)
    e2: Vec3,          // Second edge (= v2 - v0)
    n:  Vec3           // Geometric normal (= cross(e1, e2))
}

struct BBox {
    min: Vec3,         // Minimum corner
    max: Vec3          // Maximum corner
}

struct Bvh {
    node:  fn (int) -> BvhNode,     // Access to one node of the BVH
    tri:   fn (int) -> BvhTri,      // Access to one (possibly packed) triangle
    order: fn (int) -> [int * 6],   // Orders the bounding box corners for a given octant
    prefetch: fn (int) -> (),       // Prefetches a leaf or inner node

    arity: int,                     // Arity of the BVH (number of children per node)
    tri_size: int,                  // Number of triangles per packet
}

struct BvhNode {
    bbox:         fn (int) -> BBox,             // Loads the bounding box of one child node
    ordered_bbox: fn (int, [int * 6]) -> BBox,  // Loads the bounding box of one child with the given octant order (mapping specific)
    child:        fn (int) -> int,              // Gets the index of one child node
}

struct BvhTri {
    load: fn (int) -> Tri,          // Loads the given triangle in the packet
    id:   fn (int) -> int,          // Identifier of the given triangle in the packet
}

// Intrinsics required to perform the ray-box test
struct RayBoxIntrinsics {
    fmaxmaxf: fn (float, float, float) -> float,
    fminminf: fn (float, float, float) -> float,
    fminmaxf: fn (float, float, float) -> float,
    fmaxminf: fn (float, float, float) -> float,
    fmaxf:    fn (float, float) -> float,
    fminf:    fn (float, float) -> float,
    fcmp_le:  fn (float, float) -> bool
}

type Intersector = fn (Ray, fn (Hit) -> ()) -> ();

// Constructs a set of intrinsics from min and max functions.
// May not be the optimal intrinsics if the hardware provides a combined min/max instruction.
fn @make_ray_box_intrinsics( fminf: fn (float, float) -> float
                           , fmaxf: fn (float, float) -> float
                           , fcmp_le: fn (float, float) -> bool
                           ) -> RayBoxIntrinsics {
    RayBoxIntrinsics {
        fminf: fminf,
        fmaxf: fmaxf,
        fminminf: |a, b, c| fminf(fminf(a, b), c),
        fmaxmaxf: |a, b, c| fmaxf(fmaxf(a, b), c),
        fminmaxf: |a, b, c| fmaxf(fminf(a, b), c),
        fmaxminf: |a, b, c| fminf(fmaxf(a, b), c),
        fcmp_le: fcmp_le
    }
}

fn @make_ray(org: Vec3, dir: Vec3, tmin: float, tmax: float) -> Ray {
    let inv_dir = make_vec3(safe_rcp(dir.x), safe_rcp(dir.y), safe_rcp(dir.z));
    let inv_org = vec3_neg(vec3_mul(org, inv_dir));
    Ray {
        org: org,
        dir: dir,
        inv_dir: inv_dir,
        inv_org: inv_org,
        tmin: tmin,
        tmax: tmax
    }
}

fn @make_hit(inst_id: int, prim_id: int, t: float, uv: Vec2) -> Hit {
    Hit {
        distance:  t,
        uv_coords: uv,
        prim_id:   prim_id,
        inst_id:   inst_id
    }
}

fn @make_tri(v0: Vec3, e1: Vec3, e2: Vec3, n: Vec3) -> Tri {
    Tri {
        v0: v0,
        v1: vec3_sub(v0, e1),
        v2: vec3_add(v0, e2),
        e1: e1,
        e2: e2,
        n:  n
    }
}

fn @make_bbox(min: Vec3, max: Vec3) -> BBox {
    BBox {
        min: min,
        max: max
    }
}

fn @clip_ray(ray: Ray, tmin: float, tmax: float) -> Ray {
    Ray {
        org: ray.org,
        dir: ray.dir,
        inv_dir: ray.inv_dir,
        inv_org: ray.inv_org,
        tmin: tmin,
        tmax: tmax
    }
}

fn @ray_octant(ray: Ray) -> int {
    select(ray.dir.x > 0.0f, 1, 0) |
    select(ray.dir.y > 0.0f, 2, 0) |
    select(ray.dir.z > 0.0f, 4, 0)
}

fn @empty_hit(tmax: float) -> Hit {
    make_hit(-1, -1, tmax, undef())
}

fn @intersect_ray_tri(math: Intrinsics, early_exit: bool, mut mask: bool, ray: Ray, tri: Tri) -> (bool, float, float, float) {
    let no_hit = || -> ! return ((false, undef[float](), undef[float](), undef[float]()));
    let expect = |cond: bool, _| -> ! {
        mask &= cond;
        if early_exit && likely(all(!mask)) { no_hit() }
    };

    let c = vec3_sub(tri.v0, ray.org);
    let r = vec3_cross(ray.dir, c);
    let det = vec3_dot(tri.n, ray.dir);
    let abs_det = math.fabsf(det);

    let u = prodsign(vec3_dot(r, tri.e2), det);
    expect(u >= 0.0f);

    let v = prodsign(vec3_dot(r, tri.e1), det);
    expect(v >= 0.0f);
    expect(u + v <= abs_det);

    if !early_exit && likely(all(!mask)) { no_hit() }

    let t = prodsign(vec3_dot(c, tri.n), det);
    expect((abs_det != 0.0f) & (t >= abs_det * ray.tmin) & (t <= abs_det * ray.tmax));

    if !early_exit && likely(all(!mask)) { no_hit() }
    let inv_det = 1.0f / abs_det;

    (mask, t * inv_det, u * inv_det, v * inv_det)
}

fn @intersect_ray_box(math: RayBoxIntrinsics, ordered: bool, ray: Ray, bbox: BBox) -> (bool, float, float) {
    let t0 = vec3_add(vec3_mul(ray.inv_dir, bbox.min), ray.inv_org);
    let t1 = vec3_add(vec3_mul(ray.inv_dir, bbox.max), ray.inv_org);

    let (tentry, texit) =
        if ordered {
            (math.fmaxmaxf(t0.x, t0.y, math.fmaxf(t0.z, ray.tmin)),
             math.fminminf(t1.x, t1.y, math.fminf(t1.z, ray.tmax)))
        } else {
            (math.fmaxmaxf(math.fminf(t0.x, t1.x), math.fminf(t0.y, t1.y), math.fminmaxf(t0.z, t1.z, ray.tmin)),
             math.fminminf(math.fmaxf(t0.x, t1.x), math.fmaxf(t0.y, t1.y), math.fmaxminf(t0.z, t1.z, ray.tmax)))
        };

    (math.fcmp_le(tentry, texit), tentry, texit)
}
