struct Bvh {
    node:     fn (i32) -> Node, // Access to one node of the BVH
    prim:     fn (i32) -> Prim, // Access to one (possibly packed) primitive
    prefetch: fn (i32) -> (),   // Prefetches a leaf or inner node
    arity:    i32,              // Arity of the BVH (number of children per node)
}

struct Node {
    bbox:         fn (i32) -> BBox,             // Loads the bounding box of one child node
    ordered_bbox: fn (i32, RayOctant) -> BBox,  // Loads the bounding box of one child with the given octant order (mapping specific)
    child:        fn (i32) -> i32               // Gets the index of one child node
}

struct Prim {
    intersect: fn (i32, Intrinsics, Ray) -> Option[Hit],    // Intersects a primitive in the packet
    is_valid:  fn (i32) -> bool,                            // Returns true if the primitive in the packet is valid
    is_last:   bool,                                        // True if this is the last primitive packet in the leaf
    size:      i32                                          // Number of primitives in the packet (must be a constant)
}

struct Ray {
    org: Vec3,     // Origin of the ray
    dir: Vec3,     // Direction of the ray
    inv_dir: Vec3, // Inverse of the direction
    inv_org: Vec3, // Origin multiplied by the inverse of the direction
    tmin: f32,     // Minimum distance from the origin
    tmax: f32      // Maximum distance from the origin
}

struct Hit {
    distance:  f32,    // Distance to the intersection point
    uv_coords: Vec2,   // Surface coordinates
    prim_id:   i32,    // Primitive identifier, or -1 (no intersection found)
    geom_id:   i32     // Geometry identifier, or -1 (no intersection found)
}

struct Tri {
    v0: Vec3,          // First vertex
    v1: Vec3,          // Second vertex
    v2: Vec3,          // Third vertex
    e1: Vec3,          // First edge (= v0 - v1)
    e2: Vec3,          // Second edge (= v2 - v0)
    n:  Vec3           // Geometric normal (= cross(e1, e2))
}

struct BBox {
    min: Vec3,         // Minimum corner
    max: Vec3          // Maximum corner
}

// Min/max functions required to perform the ray-box test
struct MinMax {
    fmaxmaxf:   fn (f32, f32, f32) -> f32,
    fminminf:   fn (f32, f32, f32) -> f32,
    fminmaxf:   fn (f32, f32, f32) -> f32,
    fmaxminf:   fn (f32, f32, f32) -> f32,
    fmaxf:      fn (f32, f32) -> f32,
    fminf:      fn (f32, f32) -> f32,
    is_integer: bool
}

type RayOctant = i32;

// Constructs a set of comparators from min and max functions.
// May not be the optimal intrinsics if the hardware provides a combined min/max instruction.
fn @make_min_max( fminf: fn (f32, f32) -> f32
                , fmaxf: fn (f32, f32) -> f32
                , is_integer: bool
                ) = MinMax {
    fminminf   = @ |a, b, c| fminf(fminf(a, b), c),
    fmaxmaxf   = @ |a, b, c| fmaxf(fmaxf(a, b), c),
    fminmaxf   = @ |a, b, c| fmaxf(fminf(a, b), c),
    fmaxminf   = @ |a, b, c| fminf(fmaxf(a, b), c),
    fminf      = fminf,
    fmaxf      = fmaxf,
    is_integer = is_integer
}

// Floating point min/max, works on every ISA, but might not be optimal
fn @make_default_min_max() -> MinMax {
    let fminf = @ |x: f32, y: f32| select(x < y, x, y);
    let fmaxf = @ |x: f32, y: f32| select(x > y, x, y);
    make_min_max(fminf, fmaxf, false)
}

fn @make_ray(org: Vec3, dir: Vec3, tmin: f32, tmax: f32) -> Ray {
    let inv_dir = make_vec3(safe_rcp(dir.x), safe_rcp(dir.y), safe_rcp(dir.z));
    let inv_org = vec3_neg(vec3_mul(org, inv_dir));
    Ray {
        org = org,
        dir = dir,
        inv_dir = inv_dir,
        inv_org = inv_org,
        tmin = tmin,
        tmax = tmax
    }
}

fn @make_hit(geom_id: i32, prim_id: i32, t: f32, uv: Vec2) = Hit {
    distance  = t,
    uv_coords = uv,
    prim_id   = prim_id,
    geom_id   = geom_id
}

fn @make_tri(v0: Vec3, e1: Vec3, e2: Vec3, n: Vec3) = Tri {
    v0 = v0,
    v1 = vec3_sub(v0, e1),
    v2 = vec3_add(v0, e2),
    e1 = e1,
    e2 = e2,
    n  = n
}

fn @make_bbox(min: Vec3, max: Vec3) = BBox {
    min = min,
    max = max
}

fn @ray_octant(ray: Ray) -> RayOctant {
    select(ray.dir.x > 0, 1, 0) |
    select(ray.dir.y > 0, 2, 0) |
    select(ray.dir.z > 0, 4, 0)
}

fn @empty_hit(tmax: f32) = make_hit(-1, -1, tmax, undef[Vec2]())

fn @empty_bbox() = make_bbox(
    make_vec3( flt_max,  flt_max,  flt_max),
    make_vec3(-flt_max, -flt_max, -flt_max))

fn @bbox_extend(a: BBox, b: BBox) = make_bbox(
    vec3_min(a.min, b.min),
    vec3_max(a.max, b.max))

fn @bbox_append(a: BBox, b: Vec3) = make_bbox(
    vec3_min(a.min, b),
    vec3_max(a.max, b))

fn @bbox_half_area(a: BBox) -> f32 {
    let ext = vec3_sub(a.max, a.min);
    ext.x * (ext.y + ext.z) + ext.y * ext.z
}

fn @intersect_ray_tri(math: Intrinsics, backface_culling: bool, ray: Ray, tri: Tri) -> Option[(f32, f32, f32)] {
    let c = vec3_sub(tri.v0, ray.org);
    let r = vec3_cross(ray.dir, c);
    let det = vec3_dot(tri.n, ray.dir);
    let abs_det = math.fabsf(det);

    let u = prodsign(vec3_dot(r, tri.e2), det);
    let mut mask = u >= 0;

    let v = prodsign(vec3_dot(r, tri.e1), det);
    mask &= v >= 0;
    mask &= u + v <= abs_det;

    if likely(rv_all(!mask)) { return(Option[(f32, f32, f32)]::None) }

    let t = prodsign(vec3_dot(c, tri.n), det);
    mask &= if backface_culling { det < 0 } else { abs_det != 0 };
    mask &= t >= abs_det * ray.tmin;
    mask &= t <= abs_det * ray.tmax;

    if likely(rv_all(!mask)) { return(Option[(f32, f32, f32)]::None) }

    if mask {
        let inv_det = 1 / abs_det;
        make_option(t * inv_det, u * inv_det, v * inv_det)
    } else {
        Option[(f32, f32, f32)]::None
    }
}

fn @intersect_ray_box(min_max: MinMax, ordered: bool, ray: Ray, bbox: BBox) -> (f32, f32) {
    let t0 = vec3_add(vec3_mul(ray.inv_dir, bbox.min), ray.inv_org);
    let t1 = vec3_add(vec3_mul(ray.inv_dir, bbox.max), ray.inv_org);

    let (tentry, texit) =
        if ordered {
            (min_max.fmaxmaxf(t0.x, t0.y, min_max.fmaxf(t0.z, ray.tmin)),
             min_max.fminminf(t1.x, t1.y, min_max.fminf(t1.z, ray.tmax)))
        } else {
            (min_max.fmaxmaxf(min_max.fminf(t0.x, t1.x), min_max.fminf(t0.y, t1.y), min_max.fminmaxf(t0.z, t1.z, ray.tmin)),
             min_max.fminminf(min_max.fmaxf(t0.x, t1.x), min_max.fmaxf(t0.y, t1.y), min_max.fmaxminf(t0.z, t1.z, ray.tmax)))
        };

    (tentry, texit)
}
