// Compile-time scene data
struct Scene {
    num_shaders:    i32,
    num_geometries: i32,
    num_images:     i32,
    num_lights:     i32,

    shaders:    fn (i32) -> Shader,
    geometries: fn (i32) -> Geometry,
    images:     fn (i32) -> Image,
    lights:     fn (i32) -> Light,
    camera:     Camera
}

// Rendering device
struct Device {
    intrinsics: Intrinsics,

    eye_trace:  fn (Scene, EyeTracer) -> (),
    load_mesh:  fn (&[u8]) -> Geometry,
    load_image: fn (&[u8]) -> Image
}

fn @compute_surface_parameters(intrinsics: Intrinsics, scene: Scene, ray: Ray, hit: Hit) -> (SurfaceElement, Material) {
    let geom = scene.geometries(hit.geom_id);
    let surf = geom.surface_element(intrinsics, ray, hit);
    let shader_id = geom.shader_id(hit);
    let shader = scene.shaders(shader_id);
    let mat = shader(intrinsics, scene, surf);
    (surf, mat)
}

type Renderer     = fn (Scene, Device) -> ();
type Shader       = fn (Intrinsics, Scene, SurfaceElement) -> Material;
