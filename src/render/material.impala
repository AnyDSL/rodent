// Opaque material structure
struct Material {
    bsdf:        Bsdf,
    emission:    fn (Vec3) -> EmissionValue,
    is_emissive: bool
}

// Opaque description of a point on a surface
struct SurfaceElement {
    is_entering: bool,              // True if the path enters the surface
    point:       Vec3,              // Point on the surface
    face_normal: Vec3,              // Geometric normal at the surface point
    uv_coords:   Vec2,              // UV coordinates on the surface
    attr:        fn (i32) -> Vec4,  // Vertex attributes (interpolated)
    local:       Mat3x3             // Local coordinate system at the surface point
}

// Result of sampling a BSDF
struct BsdfSample {
    in_dir: Vec3,  // Incoming direction
    pdf:    f32,   // Weight of the sample
    color:  Color  // Color of the sample
}

// Opaque BSDF structure
struct Bsdf {
    // Evaluates the reflectance of the material for the given set of directions at the given point on a surface
    eval: fn (Vec3, Vec3) -> Color,
    // Evaluates the sampling probability density for a given direction and point on a surface
    pdf: fn (Vec3, Vec3) -> f32,
    // Samples a direction at the given point on a surface
    sample: fn (&mut RndState, Vec3, bool) -> BsdfSample,
    // Returns true if the material is purely specular
    is_specular: bool
}

// Creates a material with no emission
fn @make_material(bsdf: Bsdf) -> Material {
    Material {
        bsdf:        bsdf,
        emission:    @ |in_dir| make_emission_value(black, 1.0f, 1.0f),
        is_emissive: false
    }
}

// Creates a material with no emission
fn @make_emissive_material(surf: SurfaceElement, bsdf: Bsdf, light: Light) -> Material {
    Material {
        bsdf: bsdf,
        emission: @ |in_dir| light.emission(in_dir, surf.uv_coords),
        is_emissive: true
    }
}

// Creates a BSDF sample and checks that it lies on the right side of the surface
fn @make_bsdf_sample(surf: SurfaceElement, in_dir: Vec3, pdf: f32, color: Color, inverted: bool) -> BsdfSample {
    // Checks that the sample is above the surface (or under it if inverted is true)
    let valid = (pdf > 0.0f) & (inverted ^ (vec3_dot(in_dir, surf.face_normal) > 0.0f));
    BsdfSample {
        in_dir: in_dir,
        pdf: if valid { pdf } else { 1.0f },
        color: if valid { color } else { black }
    }
}

// Creates a fully absorbing BSDF that behaves like a black body
fn @make_black_bsdf() -> Bsdf {
    Bsdf {
        eval:   @ |_, _| black,
        pdf:    @ |_, _| 0.0f,
        sample: @ |_, out_dir, _| BsdfSample { in_dir: out_dir, pdf: 1.0f, color: black },
        is_specular: false
    }
}

// Creates a purely diffuse BSDF
fn @make_diffuse_bsdf(math: Intrinsics, surf: SurfaceElement, kd: Color) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| {
            color_mulf(kd, 1.0f / flt_pi)
        },
        pdf: @ |in_dir, out_dir| {
            cosine_hemisphere_pdf(positive_cos(in_dir, surf.local.col(2)))
        },
        sample: @ |rnd, out_dir, _| {
            let sample = sample_cosine_hemisphere(math, randf(rnd), randf(rnd));
            let color = color_mulf(kd, sample.dir.z * (1.0f / flt_pi));
            make_bsdf_sample(surf, mat3x3_mul(surf.local, sample.dir), sample.pdf, color, false)
        },
        is_specular: false
    }
}

// Creates a physically-correct Phong BSDF
fn @make_phong_bsdf(math: Intrinsics, surf: SurfaceElement, ks: Color, ns: f32) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| {
            let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
            color_mulf(ks, math.powf(cos, ns) * (ns + 2.0f) * (1.0f / (2.0f * flt_pi)))
        },
        pdf: @ |in_dir, out_dir| {
            let cos = positive_cos(in_dir, vec3_reflect(out_dir, surf.local.col(2)));
            cosine_power_hemisphere_pdf(math, cos, ns)
        },
        sample: @ |rnd, out_dir, _| {
            let u = randf(rnd);
            let v = randf(rnd);

            let reflect_out = vec3_reflect(out_dir, surf.local.col(2));
            let sample = sample_cosine_hemisphere(math, u, v);
            let in_dir = mat3x3_mul(make_orthonormal_mat3x3(reflect_out), sample.dir);

            let cos_r = sample.dir.z;
            let cos_n = positive_cos(in_dir, surf.local.col(2));

            let color = color_mulf(ks,
                cos_n *
                math.powf(cos_r, ns) *
                (ns + 2.0f) * (1.0f / (2.0f * flt_pi)));

            make_bsdf_sample(surf, in_dir, sample.pdf, color, false)
        },
        is_specular: false
    }
}

// Creates a perfect mirror BSDF
fn @make_mirror_bsdf(math: Intrinsics, surf: SurfaceElement, ks: Color) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| black,
        pdf:  @ |in_dir, out_dir| 0.0f,
        sample: @ |rnd, out_dir, _| {
            make_bsdf_sample(surf, vec3_reflect(out_dir, surf.local.col(2)), 1.0f, ks, false)
        },
        is_specular: true
    }
}

// Creates a perfect glass BSDF
fn @make_glass_bsdf(math: Intrinsics, surf: SurfaceElement, n1: f32, n2: f32, ks: Color) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir| black,
        pdf:  @ |in_dir, out_dir| 0.0f,
        sample: @ |rnd, out_dir, adjoint| {
            let (k1, k2) = if surf.is_entering {
                (n1, n2)
            } else {
                (n2, n1)
            };
            let k = k1 / k2;

            let n = surf.local.col(2);
            let cos_i = vec3_dot(out_dir, n);
            let cos2_t = 1.0f - k * k * (1.0f - cos_i * cos_i);

            if cos2_t > 0.0f {
                // Refraction
                let u = randf(rnd);
                let cos_t = math.sqrtf(cos2_t);
                let F = fresnel_factor(k1, k2, cos_i, cos_t);
                if (u > F) {
                    let t = vec3_sub(vec3_mulf(n, k * cos_i - cos_t), vec3_mulf(out_dir, k));
                    let adjoint_term = if adjoint { k * k } else { 1.0f };
                    return(make_bsdf_sample(surf, t, 1.0f, color_mulf(ks, adjoint_term), true))
                }
            }
            // Reflection
            make_bsdf_sample(surf, vec3_reflect(out_dir, n), 1.0f, ks, false)
        },
        is_specular: true
    }
}

// Creates a BSDF that interpolates between two other BSDFs
fn @make_mix_bsdf(mat1: Bsdf, mat2: Bsdf, k: f32) -> Bsdf {
    Bsdf {
        eval: @ |in_dir, out_dir|
            color_lerp(mat1.eval(in_dir, out_dir),
                       mat2.eval(in_dir, out_dir),
                       k),
        pdf: @ |in_dir, out_dir|
            lerp(mat1.pdf(in_dir, out_dir),
                 mat2.pdf(in_dir, out_dir),
                 k),
        sample: @ |rnd, out_dir, adjoint| {
            let u = randf(rnd);
            if u < k {
                mat1.sample(rnd, out_dir, adjoint)
            } else {
                mat2.sample(rnd, out_dir, adjoint)
            }
        },
        is_specular: mat1.is_specular & mat2.is_specular
    }
}
