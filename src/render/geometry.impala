// Abstract geometry object
struct Geometry {
    // Computes the surface element after an intersection on this geometry
    surface_element: fn (Intrinsics, Ray, Hit) -> SurfaceElement,
    // Returns the shader index at the given hit point
    shader_id: fn (Hit) -> i32
}

// Triangle mesh with one UV layer
struct TriMesh {
    normals:      &[Vec3],
    face_normals: &[Vec3],
    uvs:          &[Vec2],
    ids:          &[i32],
    num_tris:     i32
}

fn @make_tri_mesh_geometry(tri_mesh: TriMesh) -> Geometry {
    Geometry {
        surface_element: @ |math, ray, hit| {
            let i0 = tri_mesh.ids(hit.prim_id * 4 + 0);
            let i1 = tri_mesh.ids(hit.prim_id * 4 + 1);
            let i2 = tri_mesh.ids(hit.prim_id * 4 + 2);

            let face_normal = tri_mesh.face_normals(hit.prim_id);
            let normal = vec3_normalize(math, vec3_lerp2(tri_mesh.normals(i0), tri_mesh.normals(i1), tri_mesh.normals(i2), hit.uv_coords.x, hit.uv_coords.y));
            let texcoord = vec2_lerp2(tri_mesh.uvs(i0), tri_mesh.uvs(i1), tri_mesh.uvs(i2), hit.uv_coords.x, hit.uv_coords.y);
            let is_entering = vec3_dot(ray.dir, face_normal) <= 0.0f;

            SurfaceElement {
                is_entering: is_entering,
                point: vec3_add(ray.org, vec3_mulf(ray.dir, hit.distance)),
                face_normal: if is_entering { face_normal } else { vec3_neg(face_normal) },
                uv_coords: texcoord,
                local: make_orthonormal_mat3x3(if vec3_dot(ray.dir, normal) <= 0.0f { normal } else { vec3_neg(normal) })
            }
        },
        shader_id: @ |hit| tri_mesh.ids(hit.prim_id * 4 + 3)
    }
}
