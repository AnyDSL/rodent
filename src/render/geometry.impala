// Abstract geometry object (tied to one device)
struct Geometry {
    // Computes the surface element after an intersection on this geometry
    surface_element: fn (Ray, Hit) -> SurfaceElement,
    // Shader for this geometry
    shader: Shader
}

// Triangle mesh with per-vertex/per-face attributes
struct TriMesh {
    vertices:     fn (i32) -> Vec3,
    normals:      fn (i32) -> Vec3,
    face_normals: fn (i32) -> Vec3,
    triangles:    fn (i32) -> (i32, i32, i32),
    attrs:        fn (i32) -> (bool, fn (i32) -> Vec4),
    num_attrs:    i32,
    num_tris:     i32
}

// Creates a geometry object from a triangle mesh definition
fn @make_tri_mesh_geometry(math: Intrinsics, tri_mesh: TriMesh, shader: Shader) -> Geometry {
    Geometry {
        surface_element: @ |ray, hit| {
            let (i0, i1, i2) = tri_mesh.triangles(hit.prim_id);

            let face_normal = tri_mesh.face_normals(hit.prim_id);
            let normal = vec3_normalize(math, vec3_lerp2(tri_mesh.normals(i0), tri_mesh.normals(i1), tri_mesh.normals(i2), hit.uv_coords.x, hit.uv_coords.y));
            let is_entering = vec3_dot(ray.dir, face_normal) <= 0.0f;

            fn @attr(i: i32) -> Vec4 {
                if i >= tri_mesh.num_attrs {
                    make_vec4(0.0f, 0.0f, 0.0f, 0.0f)
                } else {
                    let (per_face, attr_value) = tri_mesh.attrs(i);
                    if per_face {
                        attr_value(hit.prim_id)
                    } else {
                        vec4_lerp2(attr_value(i0), attr_value(i1), attr_value(i2), hit.uv_coords.x, hit.uv_coords.y)
                    }
                }
            }

            SurfaceElement {
                is_entering: is_entering,
                point:       vec3_add(ray.org, vec3_mulf(ray.dir, hit.distance)),
                face_normal: if is_entering { face_normal } else { vec3_neg(face_normal) },
                uv_coords:   hit.uv_coords,
                local:       make_orthonormal_mat3x3(if vec3_dot(ray.dir, normal) <= 0.0f { normal } else { vec3_neg(normal) }),
                attr:        attr
            }
        },
        shader: shader
    }
}
