// Opaque camera object
struct Camera {
    // Generates a ray for a point on the image plane (in [-1, 1]^2)
    generate_ray: fn (f32, f32) -> Ray,
    // Projects a 3D point on the image plane
    project: fn (Vec3) -> Vec3,
    // Unprojects a point on the image plane
    unproject: fn (Vec3) -> Vec3,
    // Computes the local camera geometry for a point on the image plane
    geometry: fn (f32, f32) -> CameraGeometry
}

// Local geometry of the camera lens
struct CameraGeometry {
    cos_dir: f32,    // Cosine between the ray direction and the camera normal
    dist:    f32,    // Distance between the camera origin and the point on the image plane
    area:    f32     // Local pixel area (relative to total lens area)
}

fn @make_camera_geometry(cos_dir: f32, dist: f32, area: f32) = CameraGeometry {
    cos_dir = cos_dir,
    dist = dist,
    area = area
}

// Creates a perspective camera
fn @make_perspective_camera(math: Intrinsics, eye: Vec3, view: Mat3x3, w: f32, h: f32) -> Camera {
    let dir   = view.col(2);
    let right = view.col(0);
    let up    = view.col(1);

    Camera {
        generate_ray = @ |x, y| {
            let d = vec3_normalize(math,
                vec3_add(
                    vec3_add(vec3_mulf(right, w * x),
                             vec3_mulf(up, h * y)),
                    dir
                )
            );
            make_ray(eye, d, 0, flt_max)
        },
        project = @ |p| {
            let d = vec3_normalize(math, vec3_sub(p, eye));
            make_vec3(vec3_dot(d, right) / w,
                      vec3_dot(d, up) / h,
                      -vec3_dot(d, dir))
        },
        unproject = @ |_| eye,
        geometry = @ |x, y| {
            let d = math.sqrtf(1 + x * x * w * w + y * y * h * h);
            make_camera_geometry(1 / d, d, 1 / (4 * w * h))
        }
    }
}
