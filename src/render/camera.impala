struct Camera {
    generate_ray: fn (float, float, Rng) -> (Ray, Rng)
}

fn perspective_camera(eye: Vec3, mut dir: Vec3, up: Vec3, fov: float, ratio: float) -> Camera {
    dir = vec3_norm(dir);

    let w = math.tanf(fov * flt_pi / 360.0f);
    let h = w / ratio;

    let right = vec3_norm(vec3_cross(dir, up));
    let up    = vec3_norm(vec3_cross(right, dir));

    let kx = vec3_mulf(right, w);
    let ky = vec3_mulf(up,    h);

    Camera {
        generate_ray: |x, y, rng| {
            let dir = vec3_add(dir, vec3_add(vec3_mulf(kx, x), vec3_mulf(ky, y)));
            let ray = ray(eye, dir);
            (ray, rng)
        }
    }
}
