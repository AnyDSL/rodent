// Driver functions ----------------------------------------------------------------

extern "C" {
    fn rodent_get_film_data(i32, &mut &mut [f32], &mut i32, &mut i32) -> ();
    fn rodent_get_primary_stream(&mut PrimaryStream, i32) -> ();
    fn rodent_get_secondary_stream(&mut SecondaryStream, i32) -> ();
    fn rodent_load_buffer(i32, &[u8]) -> &[i8];
    fn rodent_load_bvh2_tri1(i32, &[u8], &mut &[Node2], &mut &[Tri1]) -> ();
    fn rodent_load_bvh4_tri4(i32, &[u8], &mut &[Node4], &mut &[Tri4]) -> ();
    fn rodent_load_bvh8_tri4(i32, &[u8], &mut &[Node8], &mut &[Tri4]) -> ();
    fn rodent_load_png(i32, &[u8], &mut &[u8], &mut i32, &mut i32) -> ();
    fn rodent_load_jpg(i32, &[u8], &mut &[u8], &mut i32, &mut i32) -> ();
    fn rodent_present(i32) -> ();
}

// Ray streams ---------------------------------------------------------------------

struct RayStream {
    id: &mut [i32], // this field is also used to indicate if the ray is alive
    org_x: &mut [f32],
    org_y: &mut [f32],
    org_z: &mut [f32],
    dir_x: &mut [f32],
    dir_y: &mut [f32],
    dir_z: &mut [f32],
    tmin: &mut [f32],
    tmax: &mut [f32],
}

struct PrimaryStream {
    size: i32,
    rays: RayStream,
    shader_id: &mut [i32],
    geom_id: &mut [i32],
    prim_id: &mut [i32],
    t: &mut [f32],
    u: &mut [f32],
    v: &mut [f32],
    rnd: &mut [RndState],
    mis: &mut [f32],
    contrib_r: &mut [f32],
    contrib_g: &mut [f32],
    contrib_b: &mut [f32],
    depth: &mut [i32]
}

struct SecondaryStream {
    size: i32,
    rays: RayStream,
    prim_id: &mut [i32],
    color_r: &mut [f32],
    color_g: &mut [f32],
    color_b: &mut [f32]
}

fn @make_ray_stream_reader(rays: RayStream, vector_width: i32) -> fn (i32, i32) -> Ray {
    @ |i, j| {
        let k = i * vector_width + j;
        make_ray(
            make_vec3(rays.org_x(k),
                      rays.org_y(k),
                      rays.org_z(k)),
            make_vec3(rays.dir_x(k),
                      rays.dir_y(k),
                      rays.dir_z(k)),
            rays.tmin(k),
            rays.tmax(k)
        )
    }
}

fn @make_ray_stream_writer(rays: RayStream, vector_width: i32) -> fn (i32, i32, Ray) -> () {
    @ |i, j, ray| {
        let k = i * vector_width + j;
        rays.org_x(k) = ray.org.x;
        rays.org_y(k) = ray.org.y;
        rays.org_z(k) = ray.org.z;
        rays.dir_x(k) = ray.dir.x;
        rays.dir_y(k) = ray.dir.y;
        rays.dir_z(k) = ray.dir.z;
        rays.tmin(k)  = ray.tmin;
        rays.tmax(k)  = ray.tmax;
    }
}

fn @make_primary_stream_hit_reader(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32) -> Hit {
    @ |i, j| {
        let k = i * vector_width + j;
        make_hit(
            primary.geom_id(k),
            primary.prim_id(k),
            primary.t(k),
            make_vec2(primary.u(k),
                      primary.v(k))
        )
    }
}

fn @make_primary_stream_hit_writer(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32, Hit) -> () {
    @ |i, j, hit| {
        let k = i * vector_width + j;
        primary.geom_id(k) = hit.geom_id;
        primary.prim_id(k) = hit.prim_id;
        primary.t(k)       = hit.distance;
        primary.u(k)       = hit.uv_coords.x;
        primary.v(k)       = hit.uv_coords.y;
    }
}

fn @make_secondary_stream_hit_writer(secondary: SecondaryStream, vector_width: i32) -> fn (i32, i32, Hit) -> () {
    @ |i, j, hit| {
        let k = i * vector_width + j;
        secondary.prim_id(k) = hit.prim_id;
    }
}

fn @make_primary_stream_state_reader(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32) -> RayState {
    @ |i, j| {
        let k = i * vector_width + j;
        RayState {
            rnd:     primary.rnd(k),
            contrib: make_color(primary.contrib_r(k), primary.contrib_g(k), primary.contrib_b(k)),
            mis:     primary.mis(k),
            depth:   primary.depth(k)
        }
    }
}

fn @make_primary_stream_state_writer(primary: PrimaryStream, vector_width: i32) -> fn (i32, i32, RayState) -> () {
    @ |i, j, state| {
        let k = i * vector_width + j;
        primary.rnd(k)       = state.rnd;
        primary.contrib_r(k) = state.contrib.r;
        primary.contrib_g(k) = state.contrib.g;
        primary.contrib_b(k) = state.contrib.b;
        primary.mis(k)       = state.mis;
        primary.depth(k)     = state.depth;
    }
}
