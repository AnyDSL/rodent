// A ray generation process, used to start a simulation
struct RayGen {
    // Returns the ray at the given index
    rays: fn (int) -> (Ray, PrimaryRayState),
    // Returns the number of rays in this generator
    num_rays: int
}

type ShadowRayFn = fn (Ray, ShadowRayState) -> ();
type ContinueRayFn = fn (Ray, PrimaryRayState) -> !;
type TerminateRayFn = fn () -> !;

type PrimaryRayShader = fn (SurfaceElement, Material, Ray, Hit, PrimaryRayState, ShadowRayFn, ContinueRayFn, TerminateRayFn) -> ();
type ShadowRayShader  = fn (Ray, Hit, ShadowRayState) -> ();
type RaySheduler = fn (RayGen, PrimaryRayShader, ShadowRayShader) -> ();

fn make_camera_ray_gen(math: Intrinsics,
                       init_state: fn (RndState, float, float) -> PrimaryRayState,
                       cam: Camera,
                       viewport: Viewport,
                       spp: int) -> RayGen {
    RayGenerator {
        rays: |i| {
            let j = i + cur;
            let x = j % viewport.width;
            let y = (j / viewport.width) % viewport.height;
            // Use FNV and the current pixel index to derive a random number generator state
            let mut rnd = fnv_hash(fnv_init(), j as u32) as RndState;
            let u = ((x as float) + randf(&mut rnd)) / (width  as float);
            let v = ((y as float) + randf(&mut rnd)) / (height as float);
            let state = init_state(rnd, u, v);
            let camera.generate_ray(math, u, v);
            (ray, state)
        },
        num_rays: viewport.width * viewport.height * spp
    }
}
