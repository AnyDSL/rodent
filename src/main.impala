fn @diffuse_shader(math: Intrinsics, scene: Scene, surf: SurfaceElement) -> Material {
    let texture = make_texture(math,
        make_repeat_border(),
        make_bilinear_filter(),
        scene.images(0));
    let bsdf = make_diffuse_bsdf(surf, texture(surf.uv_coords));
    make_material(bsdf)
}

extern fn render(iter: i32) -> () {
    let device   = make_cpu_device();
    let renderer = make_path_tracer(64);
    let image    = device.load_image("data/textures/wall.png");
    let tri_mesh = device.load_mesh("data/cube.obj");

    let camera = make_perspective_camera(
        make_vec3(-5.0f, -5.0f, -5.0f),
        make_orthonormal_mat3x3(vec3_normalize(device.intrinsics, make_vec3(1.0f, 1.0f, 1.0f))),
        1.0f,
        1.0f
    );
    let light = make_point_light(
        make_vec3(-3.0f, -3.0f, -3.0f),
        make_color(200.0f, 200.0f, 200.0f)
    );

    let scene = Scene {
        num_shaders:    1,
        num_geometries: 1,
        num_images:     1,
        num_lights:     1,

        shaders:    @ |i| diffuse_shader,
        geometries: @ |i| tri_mesh,
        images:     @ |i| image,
        lights:     @ |i| light,
        camera:     camera
    };

    renderer(scene, device, iter);
}
