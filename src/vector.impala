struct Vec2 {
    x: float,
    y: float
}

struct Vec3 {
    x: float,
    y: float,
    z: float
}

struct Vec4 {
    x: float,
    y: float,
    z: float,
    w: float
}

fn vec2(x: float, y: float) -> Vec2 { Vec2 { x: x, y: y } }
fn vec3(x: float, y: float, z: float) -> Vec3 { Vec3 { x: x, y: y, z: z } }
fn vec4(x: float, y: float, z: float, w: float) -> Vec4 { Vec4 { x: x, y: y, z: z, w: w } }

fn vec2_to_3(v: Vec2, z: float) -> Vec3 { vec3(v.x, v.y, z) }
fn vec3_to_2(v: Vec3) -> Vec2 { vec2(v.x, v.y) }
fn vec3_to_4(v: Vec3, w: float) -> Vec4 { vec4(v.x, v.y, v.z, w) }
fn vec4_to_3(v: Vec4) -> Vec3 { vec3(v.x, v.y, v.z) }

fn vec2_map(v: Vec2, f: fn (float) -> float) -> Vec2 { vec2(f(v.x), f(v.y)) }
fn vec3_map(v: Vec3, f: fn (float) -> float) -> Vec3 { vec3(f(v.x), f(v.y), f(v.z)) }
fn vec4_map(v: Vec4, f: fn (float) -> float) -> Vec4 { vec4(f(v.x), f(v.y), f(v.z), f(v.w)) }

fn vec2_zip(a: Vec2, b: Vec2, f: fn (float, float) -> float) -> Vec2 { vec2(f(a.x, b.x), f(a.y, b.y)) }
fn vec3_zip(a: Vec3, b: Vec3, f: fn (float, float) -> float) -> Vec3 { vec3(f(a.x, b.x), f(a.y, b.y), f(a.z, b.z)) }
fn vec4_zip(a: Vec4, b: Vec4, f: fn (float, float) -> float) -> Vec4 { vec4(f(a.x, b.x), f(a.y, b.y), f(a.z, b.z), f(a.w, b.w)) }

fn vec2_add(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| { x + y }) }
fn vec3_add(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| { x + y }) }
fn vec4_add(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| { x + y }) }
fn vec2_sub(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| { x - y }) }
fn vec3_sub(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| { x - y }) }
fn vec4_sub(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| { x - y }) }
fn vec2_mul(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| { x * y }) }
fn vec3_mul(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| { x * y }) }
fn vec4_mul(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| { x * y }) }
fn vec2_div(a: Vec2, b: Vec2) -> Vec2 { vec2_zip(a, b, |x, y| { x / y }) }
fn vec3_div(a: Vec3, b: Vec3) -> Vec3 { vec3_zip(a, b, |x, y| { x / y }) }
fn vec4_div(a: Vec4, b: Vec4) -> Vec4 { vec4_zip(a, b, |x, y| { x / y }) }

fn vec2_mulf(v: Vec2, t: float) -> Vec2 { vec2_mul(v, vec2(t, t)) }
fn vec3_mulf(v: Vec3, t: float) -> Vec3 { vec3_mul(v, vec3(t, t, t)) }
fn vec4_mulf(v: Vec4, t: float) -> Vec4 { vec4_mul(v, vec4(t, t, t, t)) }

fn vec2_dot(a: Vec2, b: Vec2) -> float { a.x * b.x + a.y * b.y }
fn vec3_dot(a: Vec3, b: Vec3) -> float { a.x * b.x + a.y * b.y + a.z * b.z }
fn vec4_dot(a: Vec4, b: Vec4) -> float { a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w }

fn vec3_cross(a: Vec3, b: Vec3) -> Vec3 {
    vec3(a.y * b.z - a.z * b.y,
         a.z * b.x - a.x * b.z,
         a.x * b.y - a.y * b.x)
}

fn vec2_len2(v: Vec2) -> float { vec2_dot(v, v) }
fn vec3_len2(v: Vec3) -> float { vec3_dot(v, v) }
fn vec4_len2(v: Vec4) -> float { vec4_dot(v, v) }
