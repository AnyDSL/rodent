fn make_scene() -> Scene {
    let width = 1080;
    let height = 720;

    let lights = |dev, i| {
        match i {
            0 => {
                let v0 = make_vec3(0.0f,  10.0f, 10.0f);
                let v1 = make_vec3(10.0f, 10.0f, 10.0f);
                let v2 = make_vec3(10.0f, 10.0f,  0.0f);
                let n = vec3_normalize(dev.math, vec3_cross(vec3_sub(v1, v0), vec3_sub(v2, v0)));
                make_triangle_light(
                    v0, v1, v2, n,
                    1.0f / triangle_area(dev.math, v0, v1, v2),
                    make_color(0.0f, 100.0f, 100.0f)
                )
            },
            _ => {
                make_point_light(
                    make_vec3(-10.0f, 10.0f, 0.0f),
                    make_color(100.0f, 100.0f, 100.0f)
                )
            }
        }
    };

    let materials = |dev, surf, i| {
        match i {
            0 => {
                make_mix_bsdf(
                    make_diffuse_bsdf(surf, make_color(0.5f, 0.5f, 0.5f)),
                    make_phong_bsdf(surf, make_color(1.0f, 1.0f, 1.0f), 10.0f),
                    0.3f
                )
            },
            1 => make_emissive_material(surf, lights(dev, 0)),
            _ => make_diffuse_bsdf(surf, white)
        }
    };

    let camera = |dev| {
        let fov = 60.0f;
        let kx = dev.math.tanf(fov * flt_pi / 360.0f);
        let ky = kx * ((height as float) / (width as float));
        make_perspective_camera(
            make_vec3(0.0f, 0.0f, -10.0f),
            make_mat3x3(
                make_vec3(1.0f, 0.0f, 0.0f),
                make_vec3(0.0f, 1.0f, 0.0f),
                make_vec3(0.0f, 0.0f, -1.0f)
            ),
            kx, ky
        )
    };

    let viewport = |dev| make_viewport(width, height);

    Scene {
        num_materials:  2,
        num_lights:     2,

        materials: materials,
        lights: lights,
        camera: camera,
        viewport: viewport
    }
}
