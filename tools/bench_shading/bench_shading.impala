static vector_width = 8;
static num_geoms = 4;
static offset : f32 = 0.0001;
static sorted = true;
static specialized = true;

fn @iterate_rays(body: fn(i32, i32) -> ()) = @|primary: &PrimaryStream, begins: &[i32], ends: &[i32], num_geoms: i32| {
    if ?num_geoms & sorted & specialized {
        for geom_id in unroll(0, num_geoms) {
            let (begin, end) = (begins(geom_id), ends(geom_id));
            for i, _vector_width in vectorized_range(vector_width, begin, end) {
                @body(i, geom_id);
            }
        }
    } else {
        for i, _vector_width in vectorized_range(vector_width, begins(0), ends(num_geoms - 1)) {
            @body(i, primary.geom_id(i))
        }
    }
};

#[export]
fn cpu_bench_shading( primary_in: &PrimaryStream
                    , primary_out: &PrimaryStream
                    , vertices: &[Vec3]
                    , normals: &[Vec3]
                    , face_normals: &[Vec3]
                    , texcoords: &[Vec2]
                    , indices: &[i32]
                    , pixels: &[u32]
                    , width: i32
                    , height: i32
                    , begins: &[i32]
                    , ends: &[i32]
                    , num_tris: i32
                    , num_iters: i32) -> () {
    let read_primary_ray    = make_ray_stream_reader(primary_in.rays, 1);
    let read_primary_hit    = make_primary_stream_hit_reader(*primary_in, 1);
    let read_primary_state  = make_primary_stream_state_reader(*primary_in, 1);
    let write_primary_ray   = make_ray_stream_writer(primary_out.rays, 1);
    let write_primary_state = make_primary_stream_state_writer(*primary_out, 1);

    let image = make_image_rgba32(@ |i, j| pixels(j * width + i), width, height);

    fn @shader(geom_id: i32, surf: SurfaceElement) -> Material {
        let texture = make_texture(make_repeat_border(), make_bilinear_filter(), image);
        let kd = if geom_id & 1 == 0 {
            make_color(0, 1, 0)
        } else {
            texture(vec4_to_2(surf.attr(0)))
        };
        let diffuse = make_diffuse_bsdf(surf, kd);
        let (ks, ns) = if geom_id & 2 == 0 {
            (make_color(0, 1, 0), 96:f32)
        } else {
            (texture(vec4_to_2(surf.attr(0))), 12:f32)
        };
        let specular = make_phong_bsdf(surf, ks, ns);
        let lum_ks = color_luminance(ks);
        let lum_kd = color_luminance(kd);
        let k = select(lum_ks + lum_kd == 0, 0:f32, lum_ks / (lum_ks + lum_kd));
        let bsdf = make_mix_bsdf(diffuse, specular, k);
        make_material(bsdf)
    }

    let tri_mesh = TriMesh {
        vertices     = @ |i| vertices(i),
        normals      = @ |i| normals(i),
        face_normals = @ |i| face_normals(i),
        triangles    = @ |i| (indices(i * 4 + 0), indices(i * 4 + 1), indices(i * 4 + 2)),
        attrs        = @ |_| (false, @ |i| vec2_to_4(texcoords(i), 0, 0)),
        num_attrs    = 1,
        num_tris     = num_tris
    };

    for iter in range(0, num_iters) {
        for i, geom_id in iterate_rays(primary_in, begins, ends, num_geoms) {
            let ray       = read_primary_ray(i, 0);
            let hit       = read_primary_hit(i, 0);
            let mut state = read_primary_state(i, 0);

            let geom = make_tri_mesh_geometry(tri_mesh, @ |_, _, surf| shader(geom_id, surf));
            let surf = geom.surface_element(ray, hit);
            let mat  = geom.shader(ray, hit, surf);

            let out_dir = vec3_neg(ray.dir);
            let sample = mat.bsdf.sample(&mut state.rnd, out_dir, false);

            let contrib = color_mulf(color_mul(state.contrib, sample.color), sample.cos / sample.pdf);
            let mis = if mat.bsdf.is_specular { 0:f32 } else { 1:f32 / sample.pdf };
            let new_ray = make_ray(surf.point, sample.in_dir, offset, flt_max);
            let new_state = make_ray_state(
                state.rnd,
                contrib,
                mis,
                state.depth + 1
            );

            write_primary_ray(i, 0, new_ray);
            write_primary_state(i, 0, new_state);
        }
    }
}
