static vector_width = 8;
static num_geoms = 4;
static offset = 0.0001f;

extern fn cpu_bench_shading( primary: &PrimaryStream
                           , vertices: &[Vec3]
                           , normals: &[Vec3]
                           , face_normals: &[Vec3]
                           , texcoords: &[Vec2]
                           , indices: &[i32]
                           , pixels: &[u32]
                           , width: i32
                           , height: i32
                           , begins: &[i32]
                           , ends: &[i32]
                           , num_tris: i32) -> () {
    let read_primary_ray    = make_ray_stream_reader(primary.rays, 1);
    let read_primary_hit    = make_primary_stream_hit_reader(*primary, 1);
    let read_primary_state  = make_primary_stream_state_reader(*primary, 1);
    let write_primary_ray   = make_ray_stream_writer(primary.rays, 1);
    let write_primary_state = make_primary_stream_state_writer(*primary, 1);

    let math = cpu_intrinsics;

    let image = make_image_rgba32(@ |i, j| pixels(j * width + i), width, height);

    fn @shader(geom_id: i32, surf: SurfaceElement) -> Material {
        let texture = make_texture(math, make_repeat_border(), make_bilinear_filter(), image);
        let kd = match geom_id {
            0_ => make_color(0.0f, 1.0f, 0.0f),
            1 => texture(vec4_to_2(surf.attr(0))),
            2 => make_color(0.0f, 0.0f, 1.0f),
            _ => texture(vec2_add(vec4_to_2(surf.attr(0)), make_vec2(0.5f, 0.5f)))
        };
        let diffuse = make_diffuse_bsdf(math, surf, kd);
        let (ks, ns) = match geom_id {
            0 => (make_color(0.0f, 1.0f, 0.0f), 96.0f),
            1 => {
                let ks = texture(vec4_to_2(surf.attr(0)));
                (ks, ks.r)
            },
            2 => {
                let ks = texture(vec4_to_2(surf.attr(0)));
                let ns = texture(vec2_add(vec4_to_2(surf.attr(0)), make_vec2(0.5f, 0.5f)));
                (ks, ns.r)
            },
            _ => (make_color(0.0f, 0.0f, 1.0f), 12.0f)
        };
        let specular = make_phong_bsdf(math, surf, ks, ns);
        let lum_ks = color_luminance(ks);
        let lum_kd = color_luminance(kd);
        let bsdf = make_mix_bsdf(diffuse, specular, lum_ks / (lum_ks + lum_kd));
        make_material(specular)
    }

    let tri_mesh = TriMesh {
        vertices:     @ |i| vertices(i),
        normals:      @ |i| normals(i),
        face_normals: @ |i| face_normals(i),
        triangles:    @ |i| (indices(i * 4 + 0), indices(i * 4 + 1), indices(i * 4 + 2)),
        attrs:        @ |_| (false, @ |i| vec2_to_4(texcoords(i), 0.0f, 0.0f)),
        num_attrs:    1,
        num_tris:     num_tris
    };

    let path_tracer = make_path_tracing_renderer(20, 4);

    for geom_id in unroll(0, num_geoms) {
        let (begin, end) = (begins(geom_id), ends(geom_id));
        for i, vector_width in vectorized_range(vector_width, begin, end) {
            let ray       = read_primary_ray(i, 0);
            let hit       = read_primary_hit(i, 0);
            let mut state = read_primary_state(i, 0);
            let ray_id    = primary.rays.id(i);

            let geom = make_tri_mesh_geometry(math, tri_mesh, @ |_, _, surf| shader(geom_id, surf));
            let surf = geom.surface_element(ray, hit);
            let mat  = geom.shader(ray, hit, surf);

            let out_dir = vec3_neg(ray.dir);
            let sample = mat.bsdf.sample(&mut state.rnd, out_dir, false);

            let contrib = color_mulf(color_mul(state.contrib, sample.color), sample.cos / sample.pdf);
            let mis = if mat.bsdf.is_specular { 0.0f } else { 1.0f / sample.pdf };
            let new_ray = make_ray(surf.point, sample.in_dir, offset, flt_max);
            let new_state = make_ray_state(
                state.rnd,
                contrib,
                mis,
                state.depth + 1
            );

            write_primary_ray(i, 0, new_ray);
            write_primary_state(i, 0, new_state);
        }
    }
}
