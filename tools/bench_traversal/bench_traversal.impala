fn frontend_config(any: bool) -> TraversalConfig {
    TraversalConfig {
        hit_callback: if any { any_hit } else { closest_hit },
        transparency: opaque
    }
}

// CPU variants
extern fn cpu_intersect_packet8(bvh: &Bvh4, rays: &[Ray8SoA], hits: &mut [Hit8SoA], ray_count: int) -> () @{
    cpu_traverse_packet_avx2(frontend_config(false), make_cpu_bvh4(*bvh), make_cpu_ray8_layout(rays, hits), ray_count);
}
extern fn cpu_occluded_packet8(bvh: &Bvh4, rays: &[Ray8SoA], hits: &mut [Hit8SoA], ray_count: int) -> () @{
    cpu_traverse_packet_avx2(frontend_config(true), make_cpu_bvh4(*bvh), make_cpu_ray8_layout(rays, hits), ray_count);
}/*
extern fn cpu_intersect_hybrid8(bvh: &Bvh4, rays: &[Ray8SoA], hits: &mut [Hit8SoA], ray_count: int) -> () @{
    cpu_traverse_hybrid_avx2(frontend_config(false), make_cpu_bvh4(*bvh), make_cpu_ray8_layout(rays, hits), ray_count);
}
extern fn cpu_occluded_hybrid8(bvh: &Bvh4, rays: &[Ray8SoA], hits: &mut [Hit8SoA], ray_count: int) -> () @{
    cpu_traverse_hybrid_avx2(frontend_config(true), make_cpu_bvh4(*bvh), make_cpu_ray8_layout(rays, hits), ray_count);
}*/
extern fn cpu_intersect_single(bvh: &Bvh4, rays: &[Ray1AoS], hits: &mut [Hit1AoS], ray_count: int) -> () @{
    cpu_traverse_single_avx2(frontend_config(false), make_cpu_bvh4(*bvh), make_cpu_ray1_layout(rays, hits), ray_count);
}
extern fn cpu_occluded_single(bvh: &Bvh4, rays: &[Ray1AoS], hits: &mut [Hit1AoS], ray_count: int) -> () @{
    cpu_traverse_single_avx2(frontend_config(true), make_cpu_bvh4(*bvh), make_cpu_ray1_layout(rays, hits), ray_count);
}

// GPU variants
extern fn gpu_intersect(bvh: &Bvh2, rays: &[Ray1AoS], hits: &mut [Hit1AoS], ray_count: int) -> () @{
    gpu_traverse(nvvm_accelerator(0),
                 nvvm_intrinsics,
                 make_ray_box_intrinsics_nvvm(),
                 frontend_config(false),
                 make_bvh2_nvvm(*bvh),
                 make_ray_layout_nvvm(rays, hits),
                 ray_count);
}
extern fn gpu_occluded(bvh: &Bvh2, rays: &[Ray1AoS], hits: &mut [Hit1AoS], ray_count: int) -> () @{
    gpu_traverse(nvvm_accelerator(0),
                 nvvm_intrinsics,
                 make_ray_box_intrinsics_nvvm(),
                 frontend_config(true),
                 make_bvh2_nvvm(*bvh),
                 make_ray_layout_nvvm(rays, hits),
                 ray_count);
}
